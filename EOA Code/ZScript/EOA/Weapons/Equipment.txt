//Equipment Stuff...
Class EquipmentTriggerer : CustomInventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	States
	{
	Use:
		TNT1 A 0 A_GiveInventory("EquipmentTrigger");
		Fail;
	}
}

Class EquipmentUnTriggerer : EquipmentTriggerer
{
	States
	{
	Use:
		TNT1 A 0 A_TakeInventory("EquipmentTrigger");
		Fail;
	}
}

Class EquipmentTrigger : EOA_Token {}
Class PowerEquipmentTrigger : PowerEOA_TempToken{ Default {Powerup.Duration 10;} }

Class CycleEquipmentRight : CustomInventory //[DoomKrakken]: Gonna need to redo this whole thing, one day, to be more streamlined.
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	States
	{
	Use:
		TNT1 A 0 
		{
			If (CountInv("EOA_FragGrenade") && CountInv("FragGrenadeSelected") && CountInv("EOA_SiphonGrenade") && !CountInv("SiphonGrenadeSelected"))
			{
				A_GiveInventory("SiphonGrenadeSelected");
				A_TakeInventory("FragGrenadeSelected");
			}
			Else If (CountInv("EOA_FragGrenade") && CountInv("FragGrenadeSelected") && !CountInv("EOA_SiphonGrenade") && CountInv("EOA_Hologram") && !CountInv("HologramSelected"))
			{
				A_GiveInventory("HologramSelected");
				A_TakeInventory("FragGrenadeSelected");
			}
			Else If (CountInv("EOA_SiphonGrenade") && CountInv("SiphonGrenadeSelected") && CountInv("EOA_Hologram") && !CountInv("HologramSelected"))
			{
				A_GiveInventory("HologramSelected");
				A_TakeInventory("SiphonGrenadeSelected");
			}
			Else If (CountInv("EOA_SiphonGrenade") && CountInv("SiphonGrenadeSelected") && !CountInv("EOA_Hologram") && CountInv("EOA_FragGrenade") && !CountInv("FragGrenadeSelected"))
			{
				A_GiveInventory("FragGrenadeSelected");
				A_TakeInventory("SiphonGrenadeSelected");
			}
			Else If (CountInv("EOA_Hologram") && CountInv("HologramSelected") && CountInv("EOA_FragGrenade") && !CountInv("FragGrenadeSelected"))
			{
				A_GiveInventory("FragGrenadeSelected");
				A_TakeInventory("HologramSelected");
			}
			Else If (CountInv("EOA_Hologram") && CountInv("HologramSelected") && !CountInv("EOA_FragGrenade") && CountInv("EOA_SiphonGrenade") && !CountInv("SiphonGrenadeSelected"))
			{
				A_GiveInventory("SiphonGrenadeSelected");
				A_TakeInventory("HologramSelected");
			}
			Else If (!(CountInv("FragGrenadeSelected") || CountInv("HologramSelected") || CountInv("SiphonGrenadeSelected")))
			{
				If (CountInv("EOA_FragGrenade"))
				{
					A_GiveInventory("FragGrenadeSelected");
				}
				Else If (CountInv("EOA_Hologram"))
				{
					A_GiveInventory("HologramSelected");
				}
				Else If (CountInv("EOA_SiphonGrenade"))
				{
					A_GiveInventory("SiphonGrenadeSelected");
				}
			}
		}
		Fail;
	}
}

Class CycleEquipmentLeft : CustomInventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	States
	{
	Use:
		TNT1 A 0 
		{
			If (CountInv("EOA_FragGrenade") && CountInv("FragGrenadeSelected") && CountInv("EOA_Hologram") && !CountInv("HologramSelected"))
			{
				A_GiveInventory("HologramSelected");
				A_TakeInventory("FragGrenadeSelected");
			}
			Else If (CountInv("EOA_FragGrenade") && CountInv("FragGrenadeSelected") && !CountInv("EOA_Hologram") && CountInv("EOA_SiphonGrenade") && !CountInv("SiphonGrenadeSelected"))
			{
				A_GiveInventory("SiphonGrenadeSelected");
				A_TakeInventory("FragGrenadeSelected");
			}
			Else If (CountInv("EOA_Hologram") && CountInv("HologramSelected") && CountInv("EOA_SiphonGrenade") && !CountInv("SiphonGrenadeSelected"))
			{
				A_GiveInventory("SiphonGrenadeSelected");
				A_TakeInventory("HologramSelected");
			}
			Else If (CountInv("EOA_Hologram") && CountInv("HologramSelected") && !CountInv("EOA_SiphonGrenade") && CountInv("EOA_FragGrenade") && !CountInv("FragGrenadeSelected"))
			{
				A_GiveInventory("FragGrenadeSelected");
				A_TakeInventory("HologramSelected");
			}
			Else If (CountInv("EOA_SiphonGrenade") && CountInv("SiphonGrenadeSelected") && CountInv("EOA_FragGrenade") && !CountInv("FragGrenadeSelected"))
			{
				A_GiveInventory("FragGrenadeSelected");
				A_TakeInventory("SiphonGrenadeSelected");
			}
			Else If (CountInv("EOA_SiphonGrenade") && CountInv("SiphonGrenadeSelected") && !CountInv("EOA_FragGrenade") && CountInv("EOA_Hologram") && !CountInv("HologramSelected"))
			{
				A_GiveInventory("HologramSelected");
				A_TakeInventory("SiphonGrenadeSelected");
			}
			Else If (!(CountInv("FragGrenadeSelected") || CountInv("HologramSelected") || CountInv("SiphonGrenadeSelected")))
			{
				If (CountInv("EOA_FragGrenade"))
				{
					A_GiveInventory("FragGrenadeSelected");
				}
				Else If (CountInv("EOA_Hologram"))
				{
					A_GiveInventory("HologramSelected");
				}
				Else If (CountInv("EOA_SiphonGrenade"))
				{
					A_GiveInventory("SiphonGrenadeSelected");
				}
			}
		}
		Fail;
	}
}

Class EquipmentChargeCounter : Ammo
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 2100;
	}
}

Class EquipmentCharge : Ammo
{
	Int EquipmentChargeCounter;
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
	Override Void DoEffect()
	{
		//Equipment
		EOA_Token.SetMaxInventory(Owner, "EquipmentCharge", 1 + Owner.CountInv("StockUp"));
		If (Owner.CountInv("EquipmentCharge") < (Owner.CountInv("EOA_FragGrenade") || Owner.CountInv("EOA_Hologram") || Owner.CountInv("EOA_SiphonGrenade")) + Owner.CountInv("StockUp"))
		{
			If (Owner.CountInv("EquipmentChargeCounter") >= 2100)
			{
				Owner.A_StartSound("Equipment/Recharge", 0, CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL);
				Owner.A_GiveInventory("EquipmentCharge");
				Owner.A_TakeInventory("EquipmentChargeCounter");
			}
			Owner.A_GiveInventory("EquipmentChargeCounter", 2 + Owner.CountInv("QuickCharge") + 3 * Owner.CountInv("RapidCharge"));
		}
		Else
		{
			Owner.A_TakeInventory("EquipmentChargeCounter");
		}
	}
}

Class EOA_FragGrenadePickup : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "Frag Grenade";
		Inventory.PickupSound "Item/Pickup";
		Scale 0.75;
		+INVENTORY.NOSCREENFLASH
	}
	States
	{
	Spawn:
		FRGP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIf(!CountInv("EOA_FragGrenade"), 2);
		TNT1 A 0 A_JumpIfInventory("EquipmentCharge", 0, "Failure");
		TNT1 A 0
		{
			If (!(CountInv("FragGrenadeSelected") || CountInv("HologramSelected") || CountInv("SiphonGrenadeSelected")))
			{
				A_GiveInventory("FragGrenadeSelected");
			}
			A_StartSound("Equipment/Recharge", 0, CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL);
			A_GiveInventory("EOA_FragGrenade");
			A_GiveInventory("EquipmentCharge");
			If (CountInv("AmmoBoostSelected") && !CountInv("AmmoBoostII"))
			{
				A_GiveInventory("AmmoBoostChallengeCounter");
			}
			A_GiveInventory("EquipmentSystem"); //Praetor Suit Menu prerequisite.
			A_GiveInventory("EquipmentChargeFlash"); //For the HUD.
		}
		Stop;
	Failure:
		TNT1 A 0;
		Fail;
	}
}

Class EOA_HologramPickup : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "Hologram";
		Inventory.PickupSound "Item/Pickup";
		Scale 0.8;
		+INVENTORY.NOSCREENFLASH
	}
	States
	{
	Spawn:
		HOLP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIf(!CountInv("EOA_Hologram"), 2);
		TNT1 A 0 A_JumpIfInventory("EquipmentCharge", 0, "Failure");
		TNT1 A 0
		{
			If (!(CountInv("FragGrenadeSelected") || CountInv("HologramSelected") || CountInv("SiphonGrenadeSelected")))
			{
				A_GiveInventory("HologramSelected");
			}
			A_StartSound("Equipment/Recharge", 0, CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL);
			A_GiveInventory("EOA_Hologram");
			A_GiveInventory("EquipmentCharge");
			If (CountInv("AmmoBoostSelected") && !CountInv("AmmoBoostII"))
			{
				A_GiveInventory("AmmoBoostChallengeCounter");
			}
			A_GiveInventory("EquipmentSystem"); //Praetor Suit Menu prerequisite.
			A_GiveInventory("EquipmentChargeFlash"); //For the HUD.
		}
		Stop;
	Failure:
		TNT1 A 0;
		Fail;
	}
}

Class EOA_SiphonGrenadePickup : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "Siphon Grenade";
		Inventory.PickupSound "Item/Pickup";
		Scale 0.5;
		+INVENTORY.NOSCREENFLASH
	}
	States
	{
	Spawn:
		SPHP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIf(!CountInv("EOA_SiphonGrenade"), 2);
		TNT1 A 0 A_JumpIfInventory("EquipmentCharge", 0, "Failure");
		TNT1 A 0
		{
			If (!(CountInv("FragGrenadeSelected") || CountInv("HologramSelected") || CountInv("SiphonGrenadeSelected")))
			{
				A_GiveInventory("SiphonGrenadeSelected");
			}
			A_StartSound("Equipment/Recharge", 0, CHANF_LISTENERZ|CHANF_UI|CHANF_LOCAL);
			A_GiveInventory("EOA_SiphonGrenade");
			A_GiveInventory("EquipmentCharge");
			If (CountInv("AmmoBoostSelected") && !CountInv("AmmoBoostII"))
			{
				A_GiveInventory("AmmoBoostChallengeCounter");
			}
			A_GiveInventory("EquipmentSystem"); //Praetor Suit Menu prerequisite.
			A_GiveInventory("EquipmentChargeFlash"); //For the HUD.
		}
		Stop;
	Failure:
		TNT1 A 0;
		Fail;
	}
}

Class EOA_EquipmentSpawner : Actor {}

Class EquipmentChargeFlash : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

//Equipment
Class EOA_EquipmentBase : Actor
{
	Int EquipmentPower;
	Override Void PostBeginPlay()
	{
		EquipmentPower = CountInv("EquipmentPowerSelected", AAPTR_TARGET) + (CountInv("EquipmentPowerSelected", AAPTR_TARGET) && CountInv("EquipmentPowerII", AAPTR_TARGET));
		Super.PostBeginPlay();
	}
	Override Void Tick()
	{
		If (Self Is "EOA_HologramProjection")
		{
			ThinkerIterator It = ThinkerIterator.Create("Actor");
			Actor Mo;
			While (Mo = Actor(It.Next()))
			{
				If (bKILLED || InStateSequence(Curstate, ResolveState("FadeAway")) || Mo == Master || Mo == Self || !Mo.bSHOOTABLE || !Mo.bISMONSTER || Mo.CurSector.PortalGroup != CurSector.PortalGroup || !CheckSight(Mo) || Mo.bKILLED || Mo.bMISSILE || Mo.CountInv("GloryKillCounter") || Mo.CountInv("PowerStaggered") || Mo.CountInv("PowerStunned") || Mo.CountInv("PowerBFGStunned"))
				{
					Continue;
				}
				Mo.Target = Self;
			}
		}
		Super.Tick();
	}
	Action Void A_Siphon()
	{
		ThinkerIterator It = ThinkerIterator.Create("Actor");
		Actor Mo;
		While (Mo = Actor(It.Next()))
		{
			If (!Target || Mo == Target || !Mo.bSHOOTABLE || !Mo.bISMONSTER || Mo.bMISSILE || Mo.bFRIENDLY || (Distance3D(Mo) > 192) || Mo.CurSector.PortalGroup != CurSector.PortalGroup || !CheckSight(Mo) || Mo.bKILLED || Mo.CountInv("GloryKillCounter"))
			{
				Continue;
			}
			Mo.Target = Target;
			Mo.bPAINLESS = True;
			Mo.A_DamageSelf(1, "Normal", DMSS_NOPROTECT|DMSS_FOILINVUL, "none", "none", AAPTR_TARGET);
			Mo.bPAINLESS = False;
			Let PPtr = PlayerPawn(Target);
			If (PPtr)
			{
				If (Invoker.EquipmentPower && PPtr.Health >= PPtr.MaxHealth)
				{
					A_GiveToTarget("EOA_SiphonArmor");
				}
				Else If (PPtr.Health < PPtr.MaxHealth)
				{
					A_GiveToTarget("Health");
				}			
			}
			//[DoomKrakken]: If Equipment Power is fully upgraded, give it a chance to do a second iteration within the same breath. :D
			If (random(0, Invoker.EquipmentPower == 2))
			{
				Mo.Target = Target;
				Mo.bPAINLESS = True;
				Mo.A_DamageSelf(1, "Normal", DMSS_NOPROTECT|DMSS_FOILINVUL, "none", "none", AAPTR_TARGET);
				Mo.bPAINLESS = False;
				Let PPtr = PlayerPawn(Target);
				If (PPtr)
				{
					If (Invoker.EquipmentPower && PPtr.Health >= PPtr.MaxHealth)
					{
						A_GiveToTarget("EOA_SiphonArmor");
					}
					Else If (PPtr.Health < PPtr.MaxHealth)
					{
						A_GiveToTarget("Health");
					}			
				}
			}
		}
	}
}

Class SiphonHealItem : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 0;
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Pickup:
		TNT1 A 0
		{
			Let PPtr = PlayerPawn(Self);
			If (CountInv("EquipmentPowerSelected") && PPtr.Health >= PPtr.MaxHealth)
			{
				A_GiveInventory("EOA_SiphonArmor");
			}
			Else If (PPtr.Health < PPtr.MaxHealth)
			{
				A_GiveInventory("Health");
			}
		}
		Stop;
	}
}

Class EOA_FragGrenadeProjectile : EOA_Projectile
{
	Bool FirstBounce;
	Bool Spawned;
	Bool HasTracer;
	Int EquipmentPower;
	Default
	{
		Projectile;
		Radius 2.5;
		Height 5;
		Scale 0.1;
		Speed 45;
		DamageFunction 8;
		Gravity 0.75;
		ReactionTime 53;
		BounceSound "Frag/Bounce";
		BounceType "Doom";
		+ALLOWBOUNCEONACTORS
		+BOUNCEONACTORS
		+CANBOUNCEWATER
		+FORCEXYBILLBOARD
		-NOGRAVITY
		+ROLLCENTER
		+ROLLSPRITE
		+USEBOUNCESTATE
	}
	Override Void PostBeginPlay()
	{
		EquipmentPowerLevel = CountInv("EquipmentPowerSelected", AAPTR_TARGET) + CountInv("EquipmentPowerSelected", AAPTR_TARGET) * CountInv("EquipmentPowerII", AAPTR_TARGET);
		If (EquipmentPowerLevel)
		{
			A_StartSound("Rune/EquipmentPower", 1, ATTN_NONE);
		}
		A_SpawnItemEx("FragGrenadeSmokeTrail", Flags: SXF_ORIGINATOR|SXF_SETTRACER);
		Super.PostBeginPlay();
	}
	Override Void Tick()
	{
		If (!(ReactionTime % 10))
		{
			//[DoomKrakken]: Originally was a PointLight, but had to switch to a PulseLight due to a strange glitch that'd cause PointLights to briefly flash at a map-wide radius upon attachment.  Also needs a Radius2 different from its Radius1, else the light will fail to show up.
			EOA_SpawnCustomDynamicLight("FragBlinkAddLight", DynamicLight.PointLight, (255, 76, 76), 32, 0, DYNAMICLIGHT.LF_ADDITIVE, 5, (0, 0, Height / 2));
			EOA_SpawnCustomDynamicLight("FragBlinkAttnLight", DynamicLight.PointLight, (255, 76, 76), 32, 0, DYNAMICLIGHT.LF_ATTENUATE, 5, (0, 0, Height / 2));
		}
		Super.Tick();
	}
	Override Int DoSpecialDamage(Actor Target, Int Damage, Name DamageType)
	{
		Headshot = False;
		Damage = Int(Damage * (1 + 0.5 * EquipmentPowerLevel));
		Return Damage;
	}
	Action Bool EOA_FragDetect(Int Dist)
	{
		BlockThingsIterator It = BlockThingsIterator.Create(Self, Dist);
		While (It.Next())
		{
			Actor Mo = It.Thing;
			If (Mo && Mo.bISMONSTER && !Mo.bFRIENDLY)
			{
				Return True;
			}
		}
		Return False;
	}
	States
	{
	Spawn:
		FRAG A 1 NoDelay
		{
			If (sqrt((Vel.X * Vel.X) + (Vel.Y * Vel.Y) + (Vel.Z * Vel.Z)) < 0.2)
			{
				Return ResolveState("Death");
			}
			If (ReactionTime == 35)
			{
				Return ResolveState("Prime");
			}
			Else If (ReactionTime <= 0)
			{
				Return ResolveState("Boom");
			}
			Else
			{
				A_SetRoll(Roll - 30);
				If (FirstBounce)
				{
					ReactionTime--;
				}
				Return ResolveState(Null);
			}
		}
		Wait;
	Bounce:
		FRAG A 0
		{
			Vel *= 0.25;
			FirstBounce = True;
			If (!HasTracer)
			{
				If (EOA_FragDetect(212 + 20 * EquipmentPowerLevel))
				{
					Invoker.HasTracer = True;
					Invoker.ReactionTime -= 18;
				}
			}
			If (ReactionTime == 35)
			{
				Return ResolveState("Prime");
			}
			Else If (ReactionTime <= 0)
			{
				Return ResolveState("Boom");
			}
			Return ResolveState(Null);
		}
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_StartSound("Frag/Bounce", 0, CHANF_OVERLAP);
			A_SetRoll(randomPick(-90, 90));
			bFLOORCLIP = bTHRUACTORS = True;
			A_Stop();
		}
	Inert:
		FRAG B 1 A_JumpIf(ReactionTime == 35, "Prime");
		FRAG B 0 A_JumpIf(ReactionTime <= 0, "Boom");
		FRAG B 0 
		{
			A_SpawnItemEx("FragGrenadeSmoke");
			ReactionTime--;
			If (!HasTracer)
			{
				A_LookEx(LOF_NOSOUNDCHECK|LOF_NOJUMP, 0, 212 + 20 * EquipmentPowerLevel, 0, 360, "Null");
				If (Target)
				{
					HasTracer = True;
					ReactionTime--;;
				}
			}
		}
		Loop;
	Prime:
		TNT1 A 0 
		{
			ReactionTime--;
			A_StartSound("Frag/Prime");
			If (Vel.Length() < 0.2)
			{
				Return ResolveState("Inert");
			}
			Return ResolveState("Spawn");
		}
		Goto Spawn;
	Boom:
		TNT1 A 0 A_SetScale(0.75 * (1 + 0.125 * EquipmentPowerLevel));
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE);
		TNT1 A 3
		{
			A_Stop();
			bNOGRAVITY = bDONTBLAST = bEXTREMEDEATH = True;
			A_SetScale(1.75 * (1 + 0.125 * EquipmentPowerLevel));
			A_SetRoll(0);
			EOA_Explode(168, 212 + 20 * EquipmentPowerLevel, XF_HURTSOURCE, 1, 48 * (EquipmentPowerLevel > 0) + 16 * (EquipmentPowerLevel > 1), 0.1875 - 0.03125 * EquipmentPowerLevel);
			EOA_SpawnCustomDynamicLight("FragExplosionAddLight", DynamicLight.PulseLight, (255, 153, 76), 212 + 20 * EquipmentPowerLevel, 1, DYNAMICLIGHT.LF_ADDITIVE, 12, (0, 0, Height / 2), 0.45);
			EOA_SpawnCustomDynamicLight("FragExplosionAttLight", DynamicLight.PulseLight, (255, 153, 76), 212 + 20 * EquipmentPowerLevel, 1, DYNAMICLIGHT.LF_ATTENUATE, 12, (0, 0, Height / 2), 0.45);
			A_StartSound("Frag/Explode");
			A_StartSound("Frag/Add", 0);
		}
		TNT1 A 10 A_SpawnItemEx("EOA_RocketExplosion", Flags: SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
		Stop;
	}
}

Class FragGrenadeSmokeTrail : FastProjectileTrail
{
	Default
	{
		MissileType "FragGrenadeSmoke";
	}
}	

Class FragGrenadeSmoke : Actor
{
	Default
	{
		Projectile;
		Radius 0;
		Height 0;
		Scale 0.15;
		Alpha 0.3;
		RenderStyle "Translucent";
		+NOINTERACTION
		+NOTRIGGER
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+ROLLCENTER
	}
	States
	{
	Spawn:
		TNT1 A 2; //Because it otherwise appears to be spawned ahead of the projectile.
		TNT1 A 0
		{
			A_ChangeVelocity(frandom(-2.0, 2.0), frandom(-5.0, 5.0), frandom(-2.0, 2.0), CVF_RELATIVE|CVF_REPLACE);
			A_SetRoll(frandom(0.0, 359.0));
			Return A_Jump(256, random(1, 24));
		}	
		GSMK ABCDEFGHIJKLMNOPQRSTUVWX 0 A_Jump(256, "SetSprite");
	SetSprite:
		"####" "#" 1
		{
			A_FadeOut(0.02);
			A_SetScale(Scale.X + 0.01);
		}
		Loop;
	}
}

Class EOA_HologramProjection : EOA_EquipmentBase
{
	Int EquipmentPowerLevel;
	Int HoloDuration;
	Default
	{
		Monster;
		Radius 20;
		Height 56;
		Health 100;
		Speed 0;
		Alpha 0;
		Tag "HoloDoom"; //[DoomKrakken]: (smirk)
		+BRIGHT
		+DONTBLAST
		+DONTTHRUST
		+FLOORCLIP
		+FRIENDLY
		-ISMONSTER
		+LOOKALLAROUND
		+NOBLOCKMONST
		+NOBLOOD
		+NODAMAGETHRUST
		+NOKILLSCRIPTS
		-SOLID
	}
	Override Void PostBeginPlay()
	{
		EquipmentPowerLevel = CountInv("EquipmentPowerSelected", AAPTR_MASTER) + CountInv("EquipmentPowerSelected", AAPTR_MASTER) * CountInv("EquipmentPowerII", AAPTR_MASTER);
		A_StartSound("Hologram/Start", 1);
		HoloDuration = 175 * (1 + EquipmentPowerLevel);
		A_SetHealth(100 * (1 + EquipmentPowerLevel));
		If (EquipmentPowerLevel)
		{
				A_StartSound("Rune/EquipmentPower", 2, ATTN_NONE);
		}
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		DOOM AAAAAAA 1 NoDelay A_FadeIn(0.135);
	See:
		DOOM A 1 
		{
			A_Chase();
			A_FaceTarget();
			HoloDuration--;
			If (HoloDuration <= 0)
			{
				Return ResolveState("FadeAway");
			}
			Return ResolveState(Null);
		}
		Wait;
	Missile:
		DOOM F 1
		{
			A_AlertMonsters();
			A_StartSound("PLR/Fire1", 6, 0, 0.5);
			A_StartSound("PLR/Fire2", 5, 0, 0.25);
			A_StartSound("PLR/Fire3", 4, 0, 0.25);
			A_StartSound("PLR/Fire4", 3);
			A_SpawnProjectile("DecoyPlasmaBall");
			A_FaceTarget();
			HoloDuration--;
			If (HoloDuration <= 0)
			{
				Return ResolveState("FadeAway");
			}
			Return ResolveState(Null);
		}
		DOOM EE 1
		{
			A_FaceTarget();
			HoloDuration--;
			If (HoloDuration <= 0)
			{
				Return ResolveState("FadeAway");
			}
			Return ResolveState(Null);
		}
		TNT1 A 0 A_Jump(10, "Done");
		Goto Missile;
	Done:
		TNT1 A 0 A_StartSound("PLR/Spin", 7, 0, 0.5);
		DOOM AAAAAAAAAAAAAAAAAA 1
		{
			A_FaceTarget();
			HoloDuration--;
			If (HoloDuration <= 0)
			{
				Return ResolveState("FadeAway");
			}
			Return ResolveState(Null);
		}
		Goto See;
	Death:
		TNT1 A 0
		{
			A_Stop();
			A_NoBlocking(0);
		}
		DOOM HIJKLM 10;
		DOOM N 35;
	FadeAway:
		"####" "#" 0 
		{
			A_StartSound("Hologram/End", 1);
			A_Stop();
			A_NoBlocking(0);
		}
		"####" "#######" 1 A_FadeOut(0.135);
		Stop;
	}
}

Class EOA_SiphonGrenadeProjectile : EOA_EquipmentBase
{
	Int EquipmentPowerLevel;
	Default
	{
		Projectile;
		Radius 6;
		Height 12;
		Scale 0.25;
		Speed 45;
		Gravity 0.625;
		+BRIGHT
		-NOGRAVITY
		+ROLLSPRITE
		+ROLLCENTER
		+NOEXTREMEDEATH
		+FORCEXYBILLBOARD
	}
	Override Void PostBeginPlay()
	{
		EquipmentPowerLevel = CountInv("EquipmentPowerSelected", AAPTR_MASTER) + CountInv("EquipmentPowerSelected", AAPTR_MASTER) * CountInv("EquipmentPowerII", AAPTR_MASTER);
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		SIPH A 1 NoDelay A_SetRoll(Roll - 30);
		Wait;
	Death:
		SIPH A 0
		{
			If (EquipmentPowerLevel)
			{
				A_StartSound("Rune/EquipmentPower", 1, ATTN_NONE);
			}
			A_AlertMonsters();
			A_SpawnItemEx("SiphonSphere", Angle: random(1, 360));
			A_StartSound("Siphon/Explode", 2, ATTN_NONE);
			bFLOORCLIP = bTHRUACTORS = bNOGRAVITY = True;
			A_Stop();
		}
		SIPH AAAAAAAA 5 A_Siphon();
		SIPH AAAAAAA 5
		{
			A_Siphon();
			A_FadeOut(0.135);
		}
		Stop;
	}
}

Class SiphonSphere : Actor
{
	Default
	{
		Alpha 0.1;
		Scale 444;
		Translation "Red";
		RenderStyle "Add";
		+BRIGHT
		+CANNOTPUSH
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOBLOCKMONST
		+NOINTERACTION
		+NOTRIGGER
		+THRUACTORS
	}
	States
	{
	Spawn:
		NULL AAAAAAAAAAAAAAAAAAAA 1 NoDelay
		{
			A_FadeIn(0.045);
			A_SetAngle(Angle - 5);
		}
	Fade:
		NULL A 1
		{
			A_SetAngle(Angle - 5);
			A_SetScale(Scale.X * 0.988);
			A_FadeOut(0.04);
		}
		Loop;
	}
}

//Equipment selection/possession tokens...
Class EOA_FragGrenade : EOA_Token {}
Class EOA_Hologram : EOA_Token  {}
Class EOA_SiphonGrenade : EOA_Token {}

Class FragGrenadeSelected : EOA_Token {}
Class HologramSelected : EOA_Token {}
Class SiphonGrenadeSelected : EOA_Token {}