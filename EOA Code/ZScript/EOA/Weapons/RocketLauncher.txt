Class RocketLauncherSelected : EOA_Token {}

//Lock-On Burst - Fire a three-round burst.  If pointed in the general direction of an enemy for long enough, they will home in on it.
Class LockOnBurst : EOA_Token {}
Class LockOnBurstSelected : EOA_Token {}
Class QuickLock : EOA_Token {} //Faster Lock-On Rate.
Class FasterRecovery : EOA_Token {} //Faster Cooldown.

Class MC_MultiTargeting : EOA_MasteryChallengeToken //Kill 5 Arch-Viles with the Lock-On Burst.
{
	Default
	{
		EOA_MasteryChallengeToken.MasteryItem "MultiTargeting";
		EOA_MasteryChallengeToken.ChallengeCounter "MultiTargetingMasteryCounter";
		Tag "Multi-Targeting";
	}
}

Class MultiTargeting : EOA_Token {} //Mastery Upgrade - By pointing at different enemies while locked, one can obtain up to three targets.  Rockets fired will be divided among them.

Class LockOnBurstChargeCounter : EOA_Token {Default {Inventory.MaxAmount 32;} }
Class LockOnBurstCooldownCounter : EOA_Token {Default {Inventory.MaxAmount 70;} }
Class LockTarget : EOA_Token {}
Class LockTarget1 : EOA_Token {}
Class LockTarget2 : EOA_Token {}
Class LockTarget3 : EOA_Token {}
Class MultiTargetingMasteryCounter : EOA_Token {Default {Inventory.MaxAmount 5;} }
Class UnlockedFire : EOA_Token {} //For non-homing rockets fired from the Lock-On Burst.
Class LockOnBurstFiring : EOA_Token {}

//Remote Detonation - Detonate rockets prematurely.
Class RemoteDetonation : EOA_Token {}
Class RemoteDetonationSelected : EOA_Token {}
Class ImprovedWarhead : EOA_Token {} //Larger Blast Radius when detonated remotely.
Class JaggedShrapnel : EOA_Token {} //Rockets also release a cloud of shrapnel upon remote detonation, which deal additional damage to enemies over time (due to bleeding).

Class MC_ExternalPayload : EOA_MasteryChallengeToken //Kill 3 or more enemies with a Remote Detonation 15 times.
{
	Default
	{
		EOA_MasteryChallengeToken.MasteryItem "ExternalPayload";
		EOA_MasteryChallengeToken.ChallengeCounter "ExternalPayloadMasteryCounter";
		Tag "External Payload";
	}
}

Class ExternalPayload : EOA_Token {} //Mastery Upgrade - Additional explosives are mounted to the outside of the rocket, allowing for a remote detonation without destroying the rocket.

Class RemoteDetonationTrigger : EOA_Token {} //For the hud message, and for the rocket itself.

Class ExternalPayloadCounter : EOA_Token {}
Class ExternalPayloadKillCounter : EOA_Token {Default {Inventory.MaxAmount 3;} }
Class ExternalPayloadMasteryCounter : EOA_Token {Default {Inventory.MaxAmount 15;} }

Class RLRMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("LockOnBurst");
			A_GiveInventory("RemoteDetonation");
		}
		Stop;
	}
}

Class RLRUpgrades : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("QuickLock");
			A_GiveInventory("FasterRecovery");
			A_GiveInventory("ImprovedWarhead");
			A_GiveInventory("JaggedShrapnel");
		}
		Stop;
	}
}

Class EOA_RocketLauncher : EOA_Weapon
{
	Actor CurrentPtr, Ptr1, Ptr2, Ptr3, Ptr1Tag, Ptr2Tag, Ptr3Tag;
	Vector3 TagPos;
	Default
	{
		Inventory.Icon "ICONRLR";
		Weapon.AmmoType "EOA_RocketAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.SlotNumber 5;
		EOA_Weapon.MeleeTics 28;
		Inventory.PickupMessage "Rocket Launcher";
		Tag "Rocket Launcher";
	}
	Override Void MarkPrecacheSounds()
	{
		MarkSound("RLR/Fire");
		MarkSound("RLR/Add");
		MarkSound("RLR/LoadStart");
		MarkSound("RLR/LoadMed");
		MarkSound("RLR/Rotate");
		MarkSound("RLR/LoadEnd");
		MarkSound("RLR/Locked");
		MarkSound("RLR/LockingOn");
		MarkSound("RLR/BurstFire");
		MarkSound("LockOnBurst/Click");
		MarkSound("LockOnBurst/Attach");
		MarkSound("RemoteDetonation/Click");
		MarkSound("RemoteDetonation/Attach");
		Super.MarkPrecacheSounds();
	}
	Override Void DoEffect()
	{
		Let Player = Owner.Player;
		If (!Player)
		{
			Super.DoEffect();
			Return;
		}

		//Mod not equipped...
		If ((Owner.GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(Owner.GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK) && Player.ReadyWeapon == Self && !(Owner.CountInv("LockOnBurstSelected") || Owner.CountInv("RemoteDetonationSelected")))
		{
			EOA_SpawnNoiseMaker("Weapon/DryFire");
		}

		//Alt-Fire ammo consumption
		If (Owner.CountInv("LockOnBurstSelected") || Owner.CountInv("TacticalScopeSelected"))
		{
			AmmoType2 = "EOA_RocketAmmo";
			AmmoUse2 = 1;
			bALTFIRE = InStateSequence(CurState, ResolveState("LockFire"));
		}
		Else
		{
			AmmoType2 = Null;
			AmmoUse2 = 0;
		}

		//Cooldown
		Owner.A_TakeInventory("LockOnBurstCooldownCounter", (1 + Owner.CountInv("FasterRecovery")) * (1 + Owner.CountInv("PowerHaste")));

		//Mastery - Multi-Targeting (Lock-On Burst)
		If (!Owner.CountInv("MultiTargeting") && Owner.CountInv("QuickLock") && Owner.CountInv("FasterRecovery"))
		{
			Owner.A_GiveInventory("MC_MultiTargeting");
			If (Owner.CountInv("MultiTargetingMasteryCounter") >= 5)
			{
				Owner.A_GiveInventory("MultiTargeting");
				Owner.A_TakeInventory("MultiTargetingMasteryCounter");
			}
		}
		Else
		{
			Owner.A_TakeInventory("MC_MultiTargeting");
		}
		
		//Mastery - External Payload (Remote Detonation)
		If (!Owner.CountInv("ExternalPayload") && Owner.CountInv("ImprovedWarhead") && Owner.CountInv("JaggedShrapnel"))
		{
			Owner.A_GiveInventory("MC_ExternalPayload");
			If (Owner.CountInv("ExternalPayloadMasteryCounter") >= 15)
			{
				Owner.A_GiveInventory("ExternalPayload");
				Owner.A_TakeInventory("ExternalPayloadMasteryCounter");
			}
		}
		Else
		{
			Owner.A_TakeInventory("MC_ExternalPayload");
		}
		
		//Mod management
		EOA_CheckDetonatorActive(); //[DoomKrakken]: For the Remote Detonation module's "active" state. :D
		EOA_CheckRLModulesActive(); //[DoomKrakken]: For the Rocket Launcher, in case we've prematurely removed the currently equipped module and there are still some sprites left to cycle through.
		If (Owner.CountInv("LockTarget1") || Owner.CountInv("LockTarget2") || Owner.CountInv("LockTarget3"))
		{
			If (!Ptr1Tag)
			{
				Ptr1 = Ptr3;
				Ptr3 = Ptr2;
				Ptr1Tag = Ptr3Tag;
				Ptr3Tag = Ptr2Tag;
				If (Owner.CountInv("LockTarget3"))
				{
					Owner.A_TakeInventory("LockTarget3");
				}
				Else If (Owner.CountInv("LockTarget2"))
				{
					Owner.A_TakeInventory("LockTarget2");
				}
				Else
				{
					Owner.A_TakeInventory("LockTarget1");
				}
			}
			If (!Ptr2Tag)
			{
				Ptr2 = Ptr1;
				Ptr1 = Ptr3;
				Ptr2Tag = Ptr1Tag;
				Ptr1Tag = Ptr3Tag;
				If (Owner.CountInv("LockTarget3"))
				{
					Owner.A_TakeInventory("LockTarget3");
				}
				Else If (Owner.CountInv("LockTarget2"))
				{
					Owner.A_TakeInventory("LockTarget2");
				}
				Else
				{
					Owner.A_TakeInventory("LockTarget1");
				}
			}
			If (!Ptr3Tag)
			{
				Ptr3 = Ptr2;
				Ptr2 = Ptr1;
				Ptr3Tag = Ptr2Tag;
				Ptr2Tag = Ptr1Tag;
				If (Owner.CountInv("LockTarget3"))
				{
					Owner.A_TakeInventory("LockTarget3");
				}
				Else If (Owner.CountInv("LockTarget2"))
				{
					Owner.A_TakeInventory("LockTarget2");
				}
				Else
				{
					Owner.A_TakeInventory("LockTarget1");
				}
			}
			If (!(Owner.CountInv("LockTarget1") || Owner.CountInv("LockTarget2") || Owner.CountInv("LockTarget3")))
			{
				Owner.A_TakeInventory("LockOnBurstChargeCounter");
				Ptr1 = Ptr2 = Ptr3 = Ptr1Tag = Ptr2Tag = Ptr3Tag = Null;
			}
		}
		If (Owner && Owner.Player && Owner.Player.ReadyWeapon && Owner.Player.ReadyWeapon != Self)
		{
			If (Owner.CountInv("RocketLauncherSelected"))
			{
				Owner.A_TakeInventory("RocketLauncherSelected");
				Owner.A_TakeInventory("LockOnBurstFiring");
				Owner.A_TakeInventory("LockOnBurstChargeCounter");
				EOA_ClearLockTargets();
				Owner.A_Overlay(-2, "Null");
			}
		}
		Super.DoEffect();
	}
	Action Void EOA_CheckDetonatorActive()
	{
		PlayerInfo Player = Players[ConsolePlayer];
		If (Player && Player.Mo && Player.Mo == Invoker.Owner && Invoker.Owner && Player.ReadyWeapon Is "EOA_RocketLauncher" && Invoker.Owner.CountInv("RemoteDetonationSelected") && Player.FindPSprite(PSP_WEAPON))
		{
			If (Invoker.Owner.CountInv("RemoteDetonationTrigger"))
			{
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDI"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RDAI");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDF"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RDAF");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDL"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RDAL");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDR"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RDAR");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDT"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RDAT");
				}
			}
			Else //[DoomKrakken]: Change it back, change it back, change it baaaaaack!!!!!
			{
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RDAI"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLDI");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RDAF"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLDF");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RDAL"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLDL");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RDAR"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLDR");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RDAT"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLDT");
				}
			}
		}
	}
	Action Void EOA_CheckRLModulesActive()
	{
		PlayerInfo Player = Players[ConsolePlayer];
		If (Player && Player.Mo && Player.Mo == Invoker.Owner && Invoker.Owner && Player.ReadyWeapon Is Self.GetClassName() && Player.FindPSprite(PSP_WEAPON))
		{
			If (!Invoker.Owner.CountInv("RemoteDetonationSelected"))
			{
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDI"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNI");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDF"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNF");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDL"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNL");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDR"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNR");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLDT"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNT");
				}
			}
			If (!Invoker.Owner.CountInv("LockOnBurstSelected"))
			{
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLBI"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNI");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLBF"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNF");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLBL"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNL");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLBR"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNR");
				}
				If (Player.FindPSprite(PSP_WEAPON).Sprite == GetSpriteIndex("RLBT"))
				{
					Player.PSprites.Sprite = GetSpriteIndex("RLNT");
				}
			}
		}
	}
	Static Const Int LockConeAngle[] = {-1, -1, 0, 1, 1, 1, 0, -1};
	Static Const Int LockConePitch[] = {0, 1, 1, 1, 0, -1, -1, -1};
	Action Bool EOA_CheckLockOn()
	{
		FTranslatedLineTarget LTarget;
		For (Int i = 0; i <= 15; i++)
		{
			For (Int j = 0; j <= 7; j++)
			{
				Let Puff = LineAttack(Angle + i * Invoker.LockConeAngle[j], 36727, Pitch + i * Invoker.LockConePitch[j], 0, "None", "EOA_NullPuff2", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL, LTarget);
				If (Puff)
				{
					Puff.Destroy();
				}
				If (LTarget.LineTarget)
				{
					Let Victim = LTarget.LineTarget;
					If (!Victim.bSHADOW && (Victim.bISMONSTER || Victim.Player))
					{
						Return True;
					}
				}
			}
		}
		Return False;
	}
	Action Void EOA_LockOn() //Thank you, phantombeta!
	{
		FTranslatedLineTarget LTarget;
		For (Int i = 0; i <= 15; i++)
		{
			For (Int j = 0; j <= 7; j++)
			{
				Let Puff = LineAttack(Angle + i * Invoker.LockConeAngle[j], 36727, Pitch + i * Invoker.LockConePitch[j], 0, "None", "EOA_NullPuff2", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL, LTarget);
				If (Puff)
				{
					Invoker.TagPos = Puff.Pos;
					Puff.Destroy();
				}
				If (LTarget.LineTarget)
				{
					Let Victim = LTarget.LineTarget;
					If (!Victim.bSHADOW && (Victim.bISMONSTER || Victim.Player))
					{
						If (Invoker.CurrentPtr == Victim && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !CountInv("LockOnBurstCooldownCounter")) //[DoomKrakken]: So that it only locks on while you're holding down the trigger. ;)
						{
							If (!CountInv("LockOnBurstChargeCounter"))
							{
								EOA_SpawnPersistentNoiseMaker(Invoker.SlotNumber, "RLR/LockingOn", 4, 0, 0.5);
							}
							A_GiveInventory("LockOnBurstChargeCounter", (1 + CountInv("PowerHaste")) * (1 + 3 * CountInv("QuickLock")));
						}
						Else
						{
							EOA_SpawnPersistentNoiseMaker(Invoker.SlotNumber, "", 4);
							A_TakeInventory("LockOnBurstChargeCounter");
							If (Victim != Invoker.Ptr1 && Victim != Invoker.Ptr2 && Victim != Invoker.Ptr3)
							{
								Invoker.CurrentPtr = Victim;
							}
						}
						Return;
					}
				}
			}
		}
		EOA_SpawnPersistentNoiseMaker(Invoker.SlotNumber, "", 4);
		A_TakeInventory("LockOnBurstChargeCounter");
	}
	Action Void EOA_AcquireLockTargets()
	{
		Actor LockTag = Spawn("EOA_LockTag", Invoker.TagPos);
		If (LockTag)
		{
			LockTag.Tracer = Invoker.CurrentPtr;
			LockTag.Target = Self;
			If (!CountInv("LockTarget1"))
			{
				Invoker.Ptr1 = Invoker.Ptr2 = Invoker.Ptr3 = Invoker.CurrentPtr; //Have all three rockets initialized to the first target acquired.
				Invoker.CurrentPtr = Null;
				Invoker.Ptr1Tag = Invoker.Ptr2Tag = Invoker.Ptr3Tag = LockTag;
				A_GiveInventory("LockTarget1");
				Return;
			}
			If (!CountInv("LockTarget2"))
			{
				Invoker.Ptr3 = Invoker.CurrentPtr; //[DoomKrakken]: No, you're not reading it wrong... I want the last rocket to deviate to the additional target.
				Invoker.CurrentPtr = Null;
				Invoker.Ptr3Tag = LockTag;
				A_GiveInventory("LockTarget2");
				Return;
			}
			If (!CountInv("LockTarget3"))
			{
				Invoker.Ptr2 = Invoker.Ptr3; //But if we've acquired all three targets, have them go in order of selection.
				Invoker.Ptr3 = Invoker.CurrentPtr;
				Invoker.CurrentPtr = Null;
				Invoker.Ptr2Tag = Invoker.Ptr3Tag;
				Invoker.Ptr3Tag = LockTag;
				A_GiveInventory("LockTarget3");
				Return;
			}
		}
	}
	Action Void EOA_LockTarget1()
	{
		Tracer = Invoker.Ptr1Tag;
	}
	Action Void EOA_LockTarget2()
	{
		Tracer = Invoker.Ptr2Tag;
	}
	Action Void EOA_LockTarget3()
	{
		Tracer = Invoker.Ptr3Tag;
	}
	Action Void EOA_ClearLockTargets()
	{
		Invoker.Ptr1 = Invoker.Ptr2 = Invoker.Ptr3 = Invoker.Ptr1Tag = Invoker.Ptr2Tag = Invoker.Ptr3Tag = Invoker.CurrentPtr = Tracer = Null;
		A_TakeInventory("LockTarget1");
		A_TakeInventory("LockTarget2");
		A_TakeInventory("LockTarget3");
	}
	States
	{
	Spawn:
		RKTL A -1;
		Stop;
	Select:
		TNT1 A 0
		{
			Invoker.SemiAutoOverride = True;
			A_WeaponOffset();
			A_GiveInventory("RocketLauncherSelected");
			If (GetCVar("EOA_Reticles"))
			{
				ACS_NamedExecuteAlways("RLRReticle", 0);
				A_SetCrosshair(99);
			}
			Else
			{
				A_SetCrosshair(0);
			}
		}
		TNT1 A 0 A_Raise();
		Wait;
	Deselect:
		TNT1 A 0
		{
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			EOA_ClearLockTargets();
		}
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNR A 0;
		"####" HFDB 1;
		TNT1 A 4
		{
			A_Overlay(-2, "Null");
			A_TakeInventory("RocketLauncherSelected");
			A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"));
		}
		TNT1 A 1 A_Lower(36);
		Wait;
	Ready:
		TNT1 A 0
		{
			If (Level.Time && !(CountInv("LockOnBurstSwitch") || CountInv("RemoteDetonationSwitch")))
			{
				EOA_SpawnNoiseMaker("Weapon/Switch");
			}
		}
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNR A 0;
		"####" ACEG 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			If (CountInv("LockOnBurstSwitch"))
			{
				A_TakeInventory("LockOnBurstSwitch");
				Return ResolveState("LockOnBurstMod");
			}
			Else If (CountInv("RemoteDetonationSwitch"))
			{
				A_TakeInventory("RemoteDetonationSwitch");
				Return ResolveState("RemoteDetonationMod");
			}
			Return ResolveState(Null);
		}
		Goto ReadyLoop;
	ReRaise:
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNR A 0;
		"####" CDEFGH 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
	ReadyLoop:
		RLBI A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDI A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNI A 0;
		"####" "#" 1 
		{
			EOA_WeaponReady(WRF_NOSWITCH * Invoker.SemiAutoOverride|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			Invoker.SemiAutoOverride = False;
			If (CountInv("LockOnBurstSwitch"))
			{
				A_TakeInventory("LockOnBurstSwitch");
				Return ResolveState("SwitchToLockOnBurst");
			}
			Else If (CountInv("RemoteDetonationSwitch"))
			{
				A_TakeInventory("RemoteDetonationSwitch");
				Return ResolveState("SwitchToRemoteDetonation");
			}
			Return ResolveState(Null);
		}
		Loop;
	Fire:
		RLBF A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDF A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNF A 0;
		"####" "#" 0
		{
			EOA_SpawnNoiseMaker("RLR/Fire");
			EOA_SpawnNoiseMaker("RLR/Add", 0, 0.5);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_Rocket", 1 + GetViewZ(), 10 + GetRelVelY() / 3);
			EOA_SetWeaponRecoilOffset(frandompick(-1.5, -1, 1, 1.5), -6, 0, 0.5);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PulseLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 8, (0, 0, Height / 2), 0.2);
			A_AlertMonsters();
		}
		"####" ABCDEFGHI 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		RLBL A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDL A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNL A 0;
		"####" "#" 0 EOA_SpawnNoiseMaker("RLR/LoadStart", 0, 0.5);
		"####" ABCDEFGHIJJJJJ 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo()) && EOA_CheckLockOn() && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
				Return ResolveState("ReadyAlt");
			}
			Return ResolveState(Null);
		}
		"####" "#" 0
		{
			EOA_SpawnNoiseMaker("RLR/LoadMed", 0, 0.5);
			EOA_SpawnNoiseMaker("RLR/Rotate");
		}
		"####" KLMNOO 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo()) && EOA_CheckLockOn() && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
				Return ResolveState("ReadyAlt");
			}
			Return ResolveState(Null);
		}		
		"####" OOOPQRST 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo()) && EOA_CheckLockOn() && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
			}
		}
		"####" "#" 0 EOA_SpawnNoiseMaker("RLR/LoadEnd", 0, 0.5);
		Goto ReadyLoop;
	ReadyAlt:
		RLBF FGHIJKLM 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
		Goto LockPrime;
	AltFire:
		TNT1 A 0 
		{
			If (CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo()) && !CountInv("LockOnBurstCooldownCounter"))
			{
				If (EOA_CheckLockOn())
				{
					Return ResolveState("LockPrime");
				}
				Else If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					EOA_SpawnNoiseMaker("Weapon/DryFire");
				}
			}
			Return ResolveState(Null);
		}
		Goto ReadyLoop;
	LockPrime:
		TNT1 A 0
		{
			A_TakeInventory("UnlockedFire");
			A_Overlay(-2, "LockCharge");
			EOA_SpawnNoiseMaker("RLR/LoadStart", 0, 0.5);
			EOA_SpawnNoiseMaker("RLR/Rotate");
			EOA_SpawnNoiseMaker("RLR/LoadMed");
		}
		RLB2 TSRQPONMLKJJKLMNOPQRST 1 
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("QuickLock"), 1);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return ResolveState("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				EOA_SpawnNoiseMaker("RLR/Locked", 0, 0.5);
				EOA_AcquireLockTargets();
				A_TakeInventory("LockOnBurstChargeCounter");
			}
			Return ResolveState(Null);
		}
	LockWait:
		RLBI A 1
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_DISABLEHASTE);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return ResolveState("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				EOA_SpawnNoiseMaker("RLR/Locked", 0, 0.5);
				EOA_AcquireLockTargets();
				A_TakeInventory("LockOnBurstChargeCounter");
				A_Overlay(-2, "Null");
				Return ResolveState("LockReady");
			}
			Else If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && CountInv("LockTarget1"))
			{
				Return ResolveState("LockFire");
			}
			Return ResolveState(Null);
		}
		Wait;
	LockCharge:
		TNT1 A 1 EOA_LockOn();
		Wait;
	LockReady:
		RLBI A 1
		{
			EOA_WeaponReady(WRF_NOFIRE);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
				Return ResolveState("LockFire");
			}
			Else If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return ResolveState("LockQuit");
			}
			Else If (CountInv("MultiTargeting") && !CountInv("LockTarget3"))
			{
				A_Overlay(-2, "LockCharge");
				Return ResolveState("LockWait");
			}
			Return ResolveState(Null);
		}
		Wait;
	LockFire:
		TNT1 A 0
		{
			A_TakeInventory("LockOnBurstChargeCounter");
			A_GiveInventory("LockOnBurstFiring");
			A_Overlay(-2, "Null");
			EOA_LockTarget1();
			If (!Tracer)
			{
				A_GiveInventory("UnlockedFire");
			}
			If (CountInv("UnlockedFire"))
			{
				EOA_SpawnNoiseMaker("RLR/Fire");
			}
			Else
			{
				EOA_SpawnNoiseMaker("RLR/BurstFire");
			}
			EOA_SpawnNoiseMaker("RLR/Add", 0, 0.5);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EOA_HomingRocket", 1 + GetViewZ(), 10 + GetRelVelY() / 3);
			EOA_SetWeaponRecoilOffset(frandompick(0.5, 1), -4, 0, 0.25);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PulseLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 8, (0, 0, Height / 2), 0.2);
			A_TakeInventory("EOA_RocketAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters();
		}
		RLBF ABC 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		TNT1 A 0 A_JumpIf(CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo(), 2);
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
		Goto LockEnd;
		TNT1 A 0
		{
			EOA_LockTarget2();
			If (CountInv("UnlockedFire"))
			{
				EOA_SpawnNoiseMaker("RLR/Fire");
			}
			Else
			{
				EOA_SpawnNoiseMaker("RLR/BurstFire");
			}
			EOA_SpawnNoiseMaker("RLR/Add", 0, 0.5);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EOA_HomingRocket", 1 + GetViewZ(), 10 + GetRelVelY() / 3);
			EOA_SetWeaponRecoilOffset(frandompick(0.5, 1), -4, 0, 0.25);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PulseLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 8, (0, 0, Height / 2), 0.2);
			A_TakeInventory("EOA_RocketAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters();
		}
		RLBF BCD 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		TNT1 A 0 A_JumpIf(CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo(), 2);
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
		Goto LockEnd;
		TNT1 A 0
		{
			EOA_LockTarget3();
			If (CountInv("UnlockedFire"))
			{
				EOA_SpawnNoiseMaker("RLR/Fire");
			}
			Else
			{
				EOA_SpawnNoiseMaker("RLR/BurstFire");
			}
			EOA_SpawnNoiseMaker("RLR/Add", 0, 0.5);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EOA_HomingRocket", 1 + GetViewZ(), 10 + GetRelVelY() / 3);
			EOA_SetWeaponRecoilOffset(frandompick(0.5, 1), -4, 0, 0.25);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PulseLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 8, (0, 0, Height / 2), 0.2);
			A_TakeInventory("EOA_RocketAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters();
		}
		RLBF CDE 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		TNT1 A 0 A_JumpIf(CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo(), 2);
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
		Goto LockEnd;
	LockEnd:
		TNT1 A 0 
		{
			EOA_ClearLockTargets();
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			If (!CountInv("UnlockedFire"))
			{
				A_GiveInventory("LockOnBurstCooldownCounter", 70);
			}
			A_TakeInventory("UnlockedFire");
			If (!CountInv("LockOnBurstSelected"))
			{
				Return ResolveState("LockQuit");
			}
			Return ResolveState(Null);
		}
		RLBF FGHIJKLM 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
	LockQuit:
		TNT1 A 0 
		{
			A_Overlay(-2, "Null");
			EOA_ClearLockTargets();
			A_TakeInventory("LockOnBurstChargeCounter");
			EOA_WeaponReady(WRF_NOSECONDARY * (!EOA_CheckLockOn() || CountInv("LockOnBurstCooldownCounter")), EOA_ALLOWMANTLE);
			If (CountInv("LockOnBurstSelected"))
			{
				EOA_SpawnNoiseMaker("RLR/LoadStart", 0, 0.5);
				EOA_SpawnNoiseMaker("RLR/Rotate");
				EOA_SpawnNoiseMaker("RLR/LoadMed");
			}
		}
		RLB2 TSRQPONMLKJJKLMNOPQRST 1 
		{
			If (!CountInv("LockOnBurstSelected"))
			{
				Return ResolveState("ReadyLoop");
			}
			EOA_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)|WRF_NOPRIMARY * !CountInv("LockOnBurstCooldownCounter")|WRF_NOSECONDARY * (!EOA_CheckLockOn() || CountInv("LockOnBurstCooldownCounter")), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			Return ResolveState(Null);
		}
		Goto ReadyLoop;
	Reload:
		TNT1 A 0 A_JumpIf(CountInv("LockOnBurst") && !CountInv("LockOnBurstSelected"), "SwitchToLockOnBurst");
		TNT1 A 0 A_JumpIf(CountInv("RemoteDetonation") && !CountInv("RemoteDetonationSelected"), "SwitchToRemoteDetonation");
		Goto ReadyLoop;
	SwitchToLockOnBurst:
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNR A 0;
		"####" HGFEDCBA 1;
	LockOnBurstMod:
		TNT1 A 0 
		{
			A_GiveInventory("LockOnBurstSelected");
			A_TakeInventory("RemoteDetonationSelected");
		}
		RLBM ABCDEFGHIJKLMN 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		TNT1 A 0 EOA_SpawnNoiseMaker("LockOnBurst/Click", 0, 0.5);
		RLBM OOOOOOOOOOOOOOOO 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		TNT1 A 0 EOA_SpawnNoiseMaker("LockOnBurst/Attach");
		RLBM PQRST 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		RLBM TTTTTTTTT 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		RLBM UVWXYZ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE);
		Goto ReadyLoop;
	SwitchToRemoteDetonation:
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 2);
		RLNR A 0;
		"####" HGFEDCBA 1;
	RemoteDetonationMod:
		TNT1 A 0 
		{
			A_GiveInventory("RemoteDetonationSelected");
			A_TakeInventory("LockOnBurstSelected");
		}
		RLDM ABCDEFGHIJKLMNO 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		TNT1 A 0 EOA_SpawnNoiseMaker("RemoteDetonation/Click", 0, 0.5);
		RLDM PPPPPPPPPPPPPPPP 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		TNT1 A 0 EOA_SpawnNoiseMaker("RemoteDetonation/Attach");
		RLDM QRSTU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		RLDM UUUUUUUUU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("HotSwap"));
		RLDM UVWXYZ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE);
		Goto ReadyLoop;
	Zoom:
		RLBT A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDT A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNT A 0;
		"####" "#" 0;
		Goto Super::Melee;
	UseEquipment:
		RLBT A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3);
		RLDT A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2);
		RLNT A 0;
		"####" "#" 0;
		Goto Super::UseEquipment;
	}
}

Class EOA_Rocket : EOA_Projectile
{
	Default
	{
		Projectile;
		Scale 0.75;
		Radius 9;
		Height 6;
		Speed 20;
		DamageFunction 52;
		Decal "BigScorch";
		//EOA_Projectile.PuffType "EOA_RocketExplosionSpawner";
		+BRIGHT
		+BLOODLESSIMPACT
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+SKYEXPLODE
	}
	Bool CheckRocketLauncherReady()
	{
		If (Target && Target.Player && Target.Player.ReadyWeapon Is "EOA_RocketLauncher")
		{
			Return True;
		}
		Return False;
	}
	States
	{
	Spawn:
		MICR A 0 NoDelay
		{
			A_SpawnItemEx("EOA_RocketSmokeTrail", Flags: SXF_ORIGINATOR|SXF_SETTRACER|SXF_TRANSFERPOINTERS);
			A_StartSound("Rocket/Fly", 4, CHAN_LOOP, 0.5);
			If (CountInv("PowerQDMG", AAPTR_TARGET))
			{
				A_SpawnItemEx("QuadDamageFX", Flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			}
		}
		MICR A 1
		{
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PointLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, Tics, (0, 0, Height / 2));
			A_GiveToTarget("RemoteDetonationTrigger");
			If ((GetPlayerInput(INPUT_BUTTONS, AAPTR_TARGET) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS, AAPTR_TARGET) & BT_ALTATTACK) && CountInv("RemoteDetonationSelected", AAPTR_TARGET) && CheckRocketLauncherReady() && !CountInv("RipAndTear", AAPTR_TARGET))
			{
				A_TakeFromTarget("RemoteDetonationTrigger");
				A_GiveInventory("RemoteDetonationTrigger"); //Give this counter to the rocket itself.
				If (CountInv("ExternalPayload", AAPTR_TARGET))
				{
					EOA_Explode(140, (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), XF_HURTSOURCE, 1, Radius * 2/*72 * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET))*/, 0.5);
					A_SpawnItemEx("ExternalPayloadExplosion", Flags: SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
					Return ResolveState("ContinueFlight");
				}
				Else
				{
					//[DoomKrakken]: Because the projectile technically didn't die, it can potentially collide with other actors, causing a "phantom" explosion to be "spontaneously" generated where the rocket supposedly died.  Set these flags so that this won't happen.
					bNOCLIP = bTHRUACTORS = True;
					Return ResolveState("Death");
				}
			}
			Return ResolveState(Null);
		}
		Wait;
	ContinueFlight:
		MICR A 1
		{
			A_TakeInventory("RemoteDetonationTrigger");
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PointLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, Tics, (0, 0, Height / 2));
		}
		Wait;
	Death:
		TNT1 AAAAA 0
		{
			If (CountInv("ImprovedWarhead", AAPTR_TARGET) && CountInv("RemoteDetonationTrigger"))
			{
				A_SpawnProjectile("BigExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-90, 10));
			}
			Else
			{
				A_SpawnProjectile("ExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-90, 10));
			}
		}
		TNT1 A 3
		{
			A_TakeFromTarget("RemoteDetonationTrigger");
			A_Stop();
			A_StartSound("Rocket/Explode");
			A_SpawnItemEx("EOA_RocketExplosionSpawner", Flags: SXF_NOCHECKPOSITION);
			If (!random(0, 2))
			{
				A_StartSound("Rocket/Add", 0);
			}
			EOA_Explode(140, (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), XF_HURTSOURCE, 1, Radius * 2, 0.5);
			If (CountInv("JaggedShrapnel", AAPTR_TARGET) && CountInv("RemoteDetonationTrigger"))
			{
				A_StartSound("RLR/Shrapnel", 0, 0, 1.0, ATTN_NORM, 1 + 0.0625 * random(-2, 2));
			}
			EOA_SpawnCustomDynamicLight("RLRAddLight", DynamicLight.PulseLight, (255, 153, 76), (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), 1, DYNAMICLIGHT.LF_ADDITIVE, 12, (0, 0, Height / 2), 0.5);
			EOA_SpawnCustomDynamicLight("RLRAttLight", DynamicLight.PulseLight, (255, 153, 76), (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), 1, DYNAMICLIGHT.LF_ATTENUATE, 12, (0, 0, Height / 2), 0.5);
		}
		TNT1 A 100 A_SetHealth(0); //The remainder of 100 tics, after the first 10 passed...
		Stop;
	Death.Sky:
		TNT1 A 1
		{
			A_StopAllSounds();
			A_TakeFromTarget("RemoteDetonationTrigger");
		}
		Stop;
	}
}

Class EOA_RocketExplosionSpawner : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		+NOINTERACTION;
	}
	States
	{
	Spawn:
		TNT1 A 10 NoDelay
		{
			For (Int i = 0; i < 9; i++)
			{
				A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE);
			}
			A_SpawnItemEx("EOA_RocketExplosion", Flags: SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION); //The duration of the explosion.
		}
		Stop;
	}
}

Class EOA_HomingRocket : EOA_Rocket
{
	Default
	{
		Scale 0.5;
		Radius 6;
		Height 3;
		DamageFunction 120; //[DoomKrakken]: +30 more damage if it hits a monster with fewer than 300 default health or an Arch-Vile. :D 
		Speed 36;
		Decal "Scorch";
		//EOA_Projectile.PuffType "EOA_HomingRocketExplosion";
		+SEEKERMISSILE
		-SKYEXPLODE
	}
	Override Int SpecialMissileHit(Actor Victim)
	{
		If (Victim.Default.Health < 300 || Victim Is "ArchVile")
		{
			Victim.DamageMobj(Self, Target, 30, DamageType);
		}
		Return Super.SpecialMissileHit(Victim);
	}
	States
	{
	Spawn:
		MICR A 0 NoDelay
		{
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_TRACER);
			A_SpawnItemEx("EOA_RocketSmokeTrail", Flags: SXF_ORIGINATOR|SXF_SETTRACER);
			A_StartSound("Rocket/Fly", 4, CHAN_LOOP, 0.5);
			If (CountInv("PowerQDMG", AAPTR_TARGET))
			{
				A_SpawnItemEx("QuadDamageFX", Flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			}
		}
		MICR A 1
		{
			//A_SeekerMissile(0, 30, SMF_PRECISE);
			If (Tracer)
			{
				A_Face(Tracer, 10 + GetAge(), 10 + GetAge()); //[DoomKrakken]: The longer the rocket stays in the air, the more precise it becomes (just a measure to prevent infinite circling).
			}
			Vel3DFromAngle(Speed, Angle, Pitch);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PointLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 1, (0, 0, Height / 2));
		}
		Wait;
	Death:
		TNT1 A 10
		{
			A_Stop();
			A_StartSound("Rocket/Explode");
			If (!random(0, 2))
			{
				A_StartSound("Rocket/Add", 0);
			}
			A_SetScale(0.75);
			A_SpawnItemEx("EOA_RocketExplosion", Flags: SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
			EOA_Explode(10, 64, XF_HURTSOURCE, 1, 20);
			EOA_SpawnCustomDynamicLight("RLRLight", DynamicLight.PulseLight, (255, 153, 76), 64, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 10, (0, 0, Height / 2), 1.0 * Tics / TICRATE);
		}
		Stop;
	}
}

Class EOA_HomingRocketExplosion : EOA_RocketExplosion
{
	Default
	{
		Scale 0.75;
	}
}

Class EOA_RocketSmokeTrail : FragGrenadeSmokeTrail
{
	Default
	{
		MissileType "RocketSmoke";
	}
	States
	{
	Spawn:
		TNT1 A 1 
		{
			A_Warp(AAPTR_TRACER, 0, 0, 0, 0, WARPF_COPYVELOCITY|WARPF_COPYPITCH|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
			If (!Tracer || (CountInv("RemoteDetonationTrigger", AAPTR_TRACER) && !CountInv("ExternalPayload", AAPTR_TARGET)))
			{
				Return ResolveState("Null");
			}
			Return ResolveState(Null);
		}
		Wait;
	Death:
		TNT1 A 0 A_JumpIf(Tracer, "Spawn");
		Stop;
	}
}

Class RocketSmoke : FragGrenadeSmoke
{
	States
	{
	SetSprite:
		"####" "#" 1
		{
			A_FadeOut(0.04);
			A_SetScale(Scale.X + 0.02);
		}
		Loop;
	}
}
Class EOA_ExplosionSmoke : Actor
{
	Int NewScale;
	Default
	{
		Speed 2;
		Radius 4;
		Height 4;
		Alpha 0.45;
		RenderStyle "Translucent";
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			NewScale = Int(Scale.X) << 16;
			Return A_Jump(256, random(1, 4));
		}
		X037 ABCD 0 A_Jump(256, "Anim");
	Anim:
		"####" "#" 1
		{
			A_SetScale(Scale.X + NewScale * 0.000000153);
			A_ScaleVelocity(0.96);
			A_FadeOut(0.0045);
		}
		Loop;
	}
}

Class EOA_RocketExplosion : Actor //FX
{
	Default
	{
		Radius 1;
		Height 1;
		Renderstyle "Add";
		+BRIGHT
		+FORCEXYBILLBOARD
		+NOINTERACTION
		+ROLLCENTER
		+ROLLSPRITE
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			A_SetScale(Scale.X * randompick(-1, 1) * 0.4, Scale.Y * randompick(-1, 1) * 0.4);
			Return A_Jump(256, "Anim1", "Anim2");
		}
	Anim1:
		ZXP0 ACEGIKMOQSUWY 1;
		ZXP1 ACEG 1;
		Stop;
	Anim2:
		ZXP0 BDFHJLNPRTVXZ 1;
		ZXP1 BDF 1;
		Stop;
	}
}

Class ExplosionTrail : Actor
{
	Default
	{
		Radius 0.5;
		Height 1;
		Speed 9;
		Renderstyle "Add";
		Gravity 0.33;
		Scale 1.5;
		+BRIGHT
		+CANNOTPUSH
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+MISSILE
		+NOBLOCKMAP
		+NOBLOCKMONST
		+NOTRIGGER
		+THRUACTORS
	}
	States
	{
	Spawn:
		NULL A 4 NoDelay 
		{
			A_ScaleVelocity(frandom(0.75, 1));
			A_SetScale(Scale.X * frandom(0.9, 1.33));
			A_SpawnItemEx("ExplosionTrail2", -Vel.X, -Vel.Y, -Vel.Z, Vel.X, Vel.Y, Vel.Z + 0.3, 0, SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEPOSITION|SXF_TRANSFERSCALE);
		}
		NULL A 1 A_FadeOut();
		Wait;
	}
}

Class ExplosionTrail2 : ExplosionTrail
{
	Default
	{
		Translation "0:255=%[0, 0, 0]:[1, 0.33, 0]";
	}
	States
	{
	Spawn:
		NULL A 6;
		NULL A 1 A_FadeOut();
		Wait;
	}
}

Class BigExplosionTrail : ExplosionTrail
{
	Default
	{
		Speed 11;
		Scale 1.8;
	}
	States
	{
	Spawn:
		NULL A 4 NoDelay 
		{
			A_ScaleVelocity(frandom(0.75, 1));
			A_SetScale(Scale.X * frandom(0.9, 1.33));
			A_SpawnItemEx("ExplosionTrail2", -Vel.X, -Vel.Y, -Vel.Z, Vel.X, Vel.Y, Vel.Z + 0.3, 0, SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEPOSITION|SXF_TRANSFERSCALE);
		}
		NULL A 1 A_FadeOut();
		Wait;
	}
}

Class ExternalPayloadExplosion : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Scale 1.2625;
		RenderStyle "Add";
		+EXTREMEDEATH
		+DONTBLAST
		+DONTREFLECT
		+FORCERADIUSDMG
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 AAAAA 0 NoDelay A_SpawnProjectile("BigExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-90, 10));
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE);
		TNT1 A 3
		{
			A_Stop();
			A_StartSound("Rocket/Explode");
			If (!random(0, 2))
			{
				A_StartSound("Rocket/Add", 0);
			}
			If (CountInv("JaggedShrapnel", AAPTR_TARGET))
			{
				A_StartSound("RLR/Shrapnel", 0, 0, 1.0, ATTN_NORM, 1 + 0.0625 * random(-2, 2));
			}
			EOA_ActorExtensions.SpawnCustomDynamicLight(Self, "RLRAddLight", DynamicLight.PulseLight, (255, 153, 76), 1, 170 * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), DYNAMICLIGHT.LF_ADDITIVE, 14, (0, 0, Height / 2), 0.5);
			EOA_ActorExtensions.SpawnCustomDynamicLight(Self, "RLRAttLight", DynamicLight.PulseLight, (255, 153, 76), 1, 170 * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), DYNAMICLIGHT.LF_ATTENUATE, 14, (0, 0, Height / 2), 0.5);
		}
		TNT1 A 10 A_SpawnItemEx("EOA_RocketExplosion", Flags: SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
		Stop;
	}
}

Class ShrapnelBleedItem : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0 
		{
			If (!bNOBLOOD) //All the monsters in DOOM can bleed, as well as those in Doom.
			{
				A_SpawnItemEx("ShrapnelDamager", Flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
			}
		}
		Stop;
	}
}

Class ShrapnelDamager : Actor
{
	Int BleedTimer;
	Default
	{
		ReactionTime 100;
		+MISSILE
		+NOCLIP
		+NOGRAVITY
		+NOEXTREMEDEATH //'Cuz it'd be weird if a monster just suddenly exploded into a mess of blood 'n gibs just from trickling blood... XD
		+NODAMAGETHRUST //'Cuz it'd be weird having the monster shimmy all over the place while bleeding... or would it? XD
		+NOINTERACTION
		+PAINLESS //'Cuz monsters don't get stunlocked from shrapnel bleeding.  They don't in DOOM, they shouldn't in Doom.
	}
	Override Void Tick()
	{
		If (!Tracer || Tracer.bKILLED || ReactionTime <= 0)
		{
			Destroy();
			Return;
		}
		If (!Level.IsFrozen() && !(ReactionTime-- % 4))
		{
			Tracer.DamageMobj(Self, Target, 8, "Normal");
			Warp(Tracer, Flags: WARPF_NOCHECKPOSITION);
			A_SpawnItemEx("Blood", Tracer.Radius * frandom(-0.8, 0.8), Tracer.Radius * frandom(-0.8, 0.8), Tracer.Height * frandom(0.2, 0.8), Flags: SXF_TRANSFERTRANSLATION);
		}
		Super.Tick();
	}
}

Class ShrapnelBleeding : EOA_TempToken
{
	Default
	{
		Powerup.Type "PowerShrapnelBleeding";
		Powerup.Duration -3;
	}
}

Class PowerShrapnelBleeding : PowerEOA_TempToken {}

Class EOA_LockTag : Actor
{
	Vector3 WarpPos;
	Default
	{
		Radius 0;
		Height 0;
		Speed 0;
		+DONTTHRUST
		+SHOOTABLE //[DoomKrakken]: So that the actor can be targeted.
		+THRUACTORS //[DoomKrakken]: So that the actor can't collide with any other actors, especially the homing rockets. ;)
	}
	Override Void PostBeginPlay()
	{
		WarpPos = Tracer.Vec3To(Self);
		Super.PostBeginPlay();
	}
	Override Void Tick()
	{
		Super.Tick();
		If (!Tracer || Tracer.bKILLED || !Target || Target.bKILLED) //[DoomKrakken]: If this actor isn't attached to any monsters, or has no one targeting it, or if the attached monster or active targeter is dead, destroy this actor.
		{
			Destroy();
		}
		If (!Target.Player)
		{
			Let RLPtrs = EOA_RocketLauncher(Target.FindInventory("EOA_RocketLauncher"));
			If (RLPtrs && (!RLPtrs.Ptr1Tag || RLPtrs.Ptr1Tag != Self) && (!RLPtrs.Ptr2Tag || RLPtrs.Ptr2Tag != Self) && (!RLPtrs.Ptr3Tag || RLPtrs.Ptr3Tag != Self)) //[DoomKrakken]: If the actor is no longer stored in any of the active targeter's stored pointers, check to see if there are any rockets that are seeking it out.  If their aren't, clear the target.  It will get destroyed the next time this Tick override is called.
			{
				ThinkerIterator It = ThinkerIterator.Create("Actor");
				Actor Mo;
				While (Mo = Actor(It.Next()))
				{
					If (Mo Is "EOA_HomingRocket" && Mo.Tracer && Mo.Tracer == Self)
					{
						Target = Mo;
						Break;
					}
					Else
					{
						Target = Null;
					}
				}
			}
		}
		If (Tracer)
		{
			Warp(Tracer, /*WarpPos.X, WarpPos.Y, WarpPos.Z, 0, WARPF_ABSOLUTEOFFSET|*/ Flags: WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE, HeightOffset: 0.75); //[DoomKrakken]: Warp to the monster this actor is supposed to be attached to.
		}
	}
}