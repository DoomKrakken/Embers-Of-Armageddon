Class EOA_BerserkFist : EOA_Weapon
{
	Weapon PrevWeapon;
	Default
	{
		Weapon.UpSound "";
		Tag "Berserk Fist";
		Weapon.AmmoType1 "None";
		Weapon.AmmoType2 "None";
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.NOAUTOFIRE
	}
	Override Void DoEffect()
	{
		If (Owner && Owner.Player && Owner.Player.ReadyWeapon && Owner.Player.ReadyWeapon != Self && !Owner.CountInv("PowerBerserk"))
		{
			Destroy();
			Return;
		}
		Super.DoEffect();
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Select:
		TNT1 A 0
		{
			If (GetCVar("EOA_Reticles"))
			{
				ACS_NamedExecuteAlways("EMGReticle", 0);
				A_SetCrosshair(99);
			}
			Else
			{
				A_SetCrosshair(0);
			}
		}
		TNT1 A 1
		{
			PowerBerserk BerserkPower = PowerBerserk(Invoker.Owner.FindInventory("PowerBerserk"));
			If (BerserkPower)
			{
				Invoker.PrevWeapon = BerserkPower.PrevWeapon;
			}
		}
		TNT1 A 0 A_Raise();
		Wait;
	Deselect:
		TNT1 A 0 A_WeaponOffset();
		BFSR DCBA 1;
		TNT1 A 1
		{
			If (Invoker.PrevWeapon)
			{
				A_SelectWeapon(Invoker.PrevWeapon.GetClass(), SWF_SELECTPRIORITY);
			}
			Else
			{
				A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
			}
		}
		TNT1 A 0 A_Lower();
		Wait;
	Ready:
		BFSR ABCD 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return ResolveState("Deselect");
			}
			Return ResolveState(Null);
		}
		Goto ReadyLoop;
	ReRaise:
		BFSR ABCD 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_DISABLESWITCH * CountInv("PowerBerserk")|WRF_NOFIRE * !CountInv("PowerBerserk")|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return ResolveState("Deselect");
			}
			Return ResolveState(Null);
		}
	ReadyLoop:
		BFST A 1 
		{
			EOA_WeaponReady(WRF_NOBOB * !CountInv("PowerBerserk")|WRF_NOFIRE * !CountInv("PowerBerserk")|WRF_DISABLESWITCH * CountInv("PowerBerserk")|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return ResolveState("Deselect");
			}
			Return ResolveState(Null);
		}
		Loop;
	Fire:
	Zoom:
		BFSR DCBA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
	ReFire:
		TNT1 A 0 
		{
			EOA_SpawnNoiseMaker("Punch/Swing");
			EOA_SpawnNoiseMaker("Berserk/Swing", 0, 0.5);
		}
		FIST NP 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
		TNT1 A 0 //[DoomKrakken]: This is where the damage is dealt should the Glory Kill check fail.
		{
			EOA_CheckGloryKill();
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Else
			{
				A_CustomPunch(500, 1, 0, "EOA_MeleePuff");
				Return ResolveState(Null);
			}
		}
		FIST RSTUW 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
		TNT1 A 5;
		TNT1 AAAAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (CountInv("PowerBerserk"))
			{
				If (((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)))
				{
					Return ResolveState("ReFire");
				}
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					Return ResolveState("AltReFire");
				}
				Return ResolveState(Null);
			}
			Return ResolveState("Deselect");
		}
		Goto ReRaise;
	AltFire:
		BFSR DCBA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
	AltReFire:
		TNT1 A 0 
		{
			EOA_SpawnNoiseMaker("Punch/Swing");
			EOA_SpawnNoiseMaker("Berserk/Swing", 0, 0.5);
		}
		FIST BD 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
		TNT1 A 0 //[DoomKrakken]: This is where the damage is dealt should the Glory Kill check fail.
		{
			EOA_CheckGloryKill();
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Else
			{
				A_CustomPunch(500, 1, 0, "EOA_MeleePuff");
				Return ResolveState(Null);
			}
		}
		FIST FGHIK 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill();
			}
			If (CountInv("RipAndTear"))
			{
				A_FireProjectile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") * CountInv("SeekAndDestroyII")))));
				Return ResolveState("BerserkGloryKillLaunch");
			}
			Return ResolveState(Null);
		}
		TNT1 A 5;
		TNT1 AAAAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (CountInv("PowerBerserk"))
			{
				If (((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)))
				{
					Return ResolveState("ReFire");
				}
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					Return ResolveState("AltReFire");
				}
				Return ResolveState(Null);
			}
			Return ResolveState("Deselect");
		}
		Goto ReRaise;
	BerserkGloryKillLaunch:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			bNOTARGET = bNOPAIN = bNODAMAGE = True;
			bNOGRAVITY = Tracer && Tracer.bNOGRAVITY;
			If (CountInv("SeekAndDestroySelected"))
			{
				EOA_SpawnNoiseMaker("Rune/SeekAndDestroy");
			}
		}
	BerserkGloryTravel:
		TNT1 A 1;
		TNT1 A 0 A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_TESTONLY, "BerserkGloryTravel") ;//[DoomKrakken]: The projectile itself has us do the warp.  This is here, doing the same thing, except it merely tests the very same conditions for the warp.  This way, it'll remain idle here until the warp fails.
		TNT1 A 0 A_JumpIfInventory("DeathFromAbove", 1, "BerserkDeathFromAbove");
		TNT1 A 1
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_Stop();
		}
		TNT1 A 0
		{
			Let Challenges = EOA_ChallengeArchive.Get();
			If (Challenges)
			{
				Challenges.QueueGK = True;
			}
			If (CountInv("SavagerySelected"))
			{
				EOA_SpawnNoiseMaker("Rune/Savagery");
				If (!CountInv("SavageryII") && SavageryQueue())
				{
					A_GiveInventory("SavageryChallengeCounter");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
			}
			If (Tracer && Tracer.Default.Health >= 300)
			{
				Return ResolveState("BerserkGloryKillComplex");
			}
			Return ResolveState(Null);
		}
	BerserkGloryKillSimple:
		TNT1 A 0
		{
			If (!GetGKAngle() && CheckGKVictimState())
			{
				Return A_Jump(128, "BerserkTearGloryKill");
			}
			Return A_Jump(128, "BerserkGloryKillSimple2");
		}
		GKFS AB 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2);
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2);
		TNT1 A 2;
		Goto BerserkGloryKillEnd;
	BerserkGloryKillSimple2:
		TNT1 A 0 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		GKFS AB 1 EOA_SetGKRecoilOffset(10, 6, -6, 2);
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(4, 2, 0, 2);
		TNT1 A 2;
		Goto BerserkGloryKillEnd;
	BerserkGloryKillComplex:
		TNT1 A 0 A_Jump(128, "BerserkGloryKillComplex2");
		GKFS AB 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2);
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2);
		TNT1 A 2 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		TNT1 A 8 A_SetTics(8 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
		GKFS AB 1 EOA_SetGKRecoilOffset(10, 6, -6, 2);
		TNT1 A 0
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(4, 2, 0, 2);
		TNT1 A 2;
		Goto BerserkGloryKillEnd;
	BerserkGloryKillComplex2:
		TNT1 A 0 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		GKFS AB 1 EOA_SetGKRecoilOffset(10, 6, -6, 2);
		TNT1 A 0 
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(4, 2, 0, 2);
		TNT1 A 2 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 0);
		TNT1 A 8 A_SetTics(8 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
		GKFS AB 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2);
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2);
		TNT1 A 3;
		Goto BerserkGloryKillEnd;
	BerserkTearGloryKill:
		TNT1 A 0
		{
			A_Overlay(10, "BerserkTearGloryKillAnim");
			A_Overlay(-10, "BerserkTearGloryKillAnim");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, True);
		}
		TNT1 A 3;
		TNT1 A 6 A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
		TNT1 A 12 A_SetTics(12 - 6 * (CountInv("SavagerySelected") + (CountInv("SavagerySelected") && CountInv("SavageryII"))));
		TNT1 A 6
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff");
			A_GiveInventory("GloryTorn", 1, AAPTR_TRACER);
		}
		Goto BerserkGloryKillEnd;
	BerserkTearGloryKillAnim:
		TNT1 A 0
		{
			A_OverlayFlags(OverlayID(), PSPF_ADDWEAPON|PSPF_ADDBOB, False); //[DoomKrakken]: These flags are enabled by default, and wind up interfering with the animation here.
			A_OverlayOffset(OverlayID());
		}
		GRBH ABC 1;
		GRBH DDDDDD 1 A_OverlayOffset(OverlayID(), random(-2, 2), 32 + random(0, 2), WOF_INTERPOLATE);
		GRBH DDDDDD 1
		{
			A_OverlayOffset(OverlayID(), random(-2, 2), 32 + random(0, 2), WOF_INTERPOLATE);
			A_SetTics(1 - CountInv("SavagerySelected"));
		}
		GRBH DDDDDD 1
		{
			A_OverlayOffset(OverlayID(), random(-2, 2), 32 + random(0, 2), WOF_INTERPOLATE);
			A_SetTics(1 - (CountInv("SavagerySelected") && CountInv("SavageryII")));
		}
		TNT1 A 0 A_OverlayOffset(OverlayID(), 0, 32, WOF_INTERPOLATE);
		GRBH EGIKMO 1;
		Stop;
	BerserkGloryKillEnd:
		TNT1 A 10 
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 0);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			A_SetTics(10 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			bNOTARGET = bNOPAIN = bNODAMAGE = bNOGRAVITY = False;
			A_TakeInventory("RipAndTear");
			A_TakeInventory("DeathFromAbove");
			If (CountInv("ArmoredOffensiveSelected"))
			{
				EOA_SpawnNoiseMaker("Rune/ArmoredOffensive");
			}
			If (CountInv("BloodFueledSelected"))
			{
				EOA_SpawnNoiseMaker("Rune/BloodFueled");
				If (CountInv("BloodFueledII"))
				{
					A_GiveInventory("ExtendedBloodFueledSpeed");
				}
				Else
				{
					A_GiveInventory("BloodFueledSpeed");
				}
			}
		}
		Goto ReRaise;
	BerserkDeathFromAbove:
		TNT1 A 1
		{
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_SetPitch(60, SPF_INTERPOLATE);
			A_Stop();
		}
		TNT1 A 0
		{
			Let Challenges = EOA_ChallengeArchive.Get();
			If (Challenges)
			{
				Challenges.QueueGK = True;
			}
			If (CountInv("SavagerySelected"))
			{
				EOA_SpawnNoiseMaker("Rune/Savagery");
				If (!CountInv("SavageryII") && SavageryQueue())
				{
					A_GiveInventory("SavageryChallengeCounter");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
			}
			If (CountInv("DazedAndConfusedSelected") && !CountInv("DazedAndConfusedII"))
			{
				A_GiveInventory("DazedAndConfusedChallengeCounter");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII"))
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
			}
			EOA_SetGKRecoilOffset(0, 0, randompick(-10, 10), True);
			A_Overlay(-10, "DeathFromAbove2");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, True);
			A_WeaponOffset(-35, 0, WOF_KEEPY);
			A_OverlayOffset(-10, -5, 0, WOF_KEEPY);
		}
		KICK ONML 1 A_SetPitch(60, SPF_INTERPOLATE);
		TNT1 A 0
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff");
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		KICK KJIHGFEDCCC 1
		{
			A_SetPitch(60, SPF_INTERPOLATE);
			If (CountInv("SavagerySelected"))
			{
				If (CountInv("SavageryII"))
				{
					If (CountInv("SpeedCounter") >= 3)
					{
						A_TakeInventory("SpeedCounter");
					}
					Else
					{
						A_SetTics(0);
						A_GiveInventory("SpeedCounter");
					}
				}
				Else If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		KICK B 1 A_SetPitch(54, SPF_INTERPOLATE);
		KICK A 1 A_SetPitch(48, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(42, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(36, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(30, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(24, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(18, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(12, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(6, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(0, SPF_INTERPOLATE);
		Goto BerserkGloryKillEnd;
	}
}

Class BerserkPuff : EOA_MeleePuff
{
	Default
	{
		+ALWAYSPUFF
		+FOILINVUL
		+PUFFONACTORS
	}
	States
	{
	XDeath:
		TNT1 A 0 A_StartSound("Punch/Berserk");
		Stop;
	Melee:
	Crash:
		TNT1 A 0 A_StartSound("Punch/Berserk");
		Goto Super::Melee;
	}
}

Class SpecialEOA_MeleePuff : BulletPuff
{
	Default
	{
		+FOILINVUL
		+HITTRACER
		+PUFFONACTORS
	}
	States
	{
	XDeath:
		TNT1 A 0
		{
			If (A_JumpIfHealthLower(500 * (1 + 3 * (CountInv("PowerQDMG", AAPTR_TARGET))), "Null", AAPTR_TRACER))
			{
				A_GiveInventory("GloryKillCounter", 1, AAPTR_TRACER);
			}
		}
		TNT1 A 0 A_StartSound("Punch/Berserk");
		Stop;
	Melee:
		TNT1 A 0
		{
			If (A_JumpIfHealthLower(500 * (1 + 3 * (CountInv("PowerQDMG", AAPTR_TARGET))), "Null", AAPTR_TRACER))
			{
				A_GiveInventory("GloryKillCounter", 1, AAPTR_TRACER);
			}
		}
		TNT1 A 0 A_StartSound("Punch/Berserk");
	Crash:
		TNT1 A 0 A_StartSound("Punch/Base");
		Goto Super::Melee;
	}
}
