Class DoomSlayer : DoomPlayer
{
	Transient CVar NumSavingThrows, Run, TrueSpeed, Z_View;
	EOA_FieldDrone LastDroneSelected;
	EOA_RuneTrialStone LastStoneSelected;
	Bool NearSecret;
	Int AirTime;
	Bool FirstStep;
	Double OldVelZ;
	Default
	{
		Gravity 0.6;
		Player.CrouchSprite "DSCR";
		Player.DisplayName "Doom Marine";
		Player.JumpZ 7;
		Player.ForwardMove 1.5, 0.75; //[DoomKrakken]: We're disabling walking.  Move at top speed AT ALL TIMES. >:D
		Player.SideMove 1.5, 0.75;
		Player.GruntSpeed 24;
		Player.TeleportFreezeTime 0;
		Player.SoundClass "DoomSlayer";
		Player.StartItem "EOA_ThrustBootStart";
		Player.StartItem "EOA_ShotgunStart";
		Player.StartItem "EOA_Pistol";
		Player.StartItem "EOA_ShellAmmo", 8;
		Player.StartItem "EOA_RocketAmmo", 5;
		Player.StartItem "EOA_CellAmmo", 30;
		Player.StartItem "MicroMissileCounter", 6;
		Player.StartItem "EnvironmentalResistance";
		Player.StartItem "EquipmentTriggerer";
		Player.StartItem "EquipmentUnTriggerer";
		Player.StartItem "CycleEquipmentLeft";
		Player.StartItem "CycleEquipmentRight";
		Player.StartItem "StunBombReady";
		Player.MaxHealth 100; //Default, but I think it's actually 0, which is then interpreted as being 100, which is why it keeps returning 0 if left unmodified...
		Player.WeaponSlot 1, "EOA_Chainsaw", "EOA_Pistol";
		Player.WeaponSlot 2, "EOA_CombatShotgun";
		Player.WeaponSlot 3, "EOA_SuperShotgun";
		Player.WeaponSlot 4, "EOA_HeavyAssaultRifle";
		Player.WeaponSlot 5, "EOA_RocketLauncher";
		Player.WeaponSlot 6, "EOA_PlasmaRifle";
		Player.WeaponSlot 7, "EOA_GaussCannon";
		Player.WeaponSlot 8, "EOA_Chaingun";
		Player.WeaponSlot 9, "EOA_BFG";
		Player.WeaponSlot 0, "EOA_Chainsaw";
		Player.AttackZOffset 11;
		+ALLOWPAIN
		//+DONTTHRUST
		//PainChance 256
	}
	/*Double Lerp (Double v0, Double v1, Double t)
	{
		Return (1 - t) * v0 + t * v1;
	}*/
	Override Void BeginPlay()
	{
		FirstStep = True;
		Super.BeginPlay();
	}
	Override Void Tick()
	{
		If (!Player || !Player.Mo || Player.Mo != Self)
		{
			Super.Tick();
			Return;
		}
		
		//CVar Caching
		Run = Run ? Run : CVar.GetCVar("cl_run", Player);
		NumSavingThrows = NumSavingThrows ? NumSavingThrows : CVar.GetCVar("SavingThrows", Player);
		TrueSpeed = TrueSpeed ? TrueSpeed : CVar.GetCVar("EOA_TrueSpeed", Player);
		Z_View = Z_View ? Z_View : CVar.GetCVar("EOA_ViewZ", Player);
		
		//[DoomKrakken]: Tiny movements for passive pickups.
		Vector2 OldPos = Pos.XY;
		TryMove(Pos.XY + (0.0001, 0.0001), 0);
		TryMove(OldPos, 0);
		//[DoomKrakken]: Armor
		Let Armor = BasicArmor(FindInventory("BasicArmor"));
		If (Armor)
		{
			Armor.MaxAmount = max(Armor.MaxAmount, GetDefaultByType("EOA_Armor").MaxSaveAmount + 25 * CountInv("EOA_ArgentArmorBonusCounter"));
			Armor.ArmorType = GetDefaultByType("EOA_Armor").GetClassName();
			Armor.Icon = TexMan.CheckForTexture("SHLDE0", TexMan.TYPE_ANY);
			Armor.SavePercent = clamp(GetDefaultByType("EOA_Armor").SavePercent, 0, 100) / 100;
			Armor.MaxAbsorb =GetDefaultByType("EOA_Armor").MaxAbsorb;
			Armor.ArmorType = GetDefaultByType("EOA_Armor").GetClassName();
			Armor.MaxFullAbsorb = GetDefaultByType("EOA_Armor").MaxFullAbsorb;
			Armor.ActualSaveAmount = GetDefaultByType("EOA_Armor").MaxSaveAmount;
		}
		
		//[DoomKrakken]: Maintenance
		
		//[DoomKrakken]: Adjust player speed to be the original player's speed, or DOOM's player's speed, based on personal preferences.
		ForwardMove1 = TrueSpeed.GetBool() ? 1.5 : 2;
		SideMove1 =TrueSpeed.GetBool() ? 1.5 : 2;
		ForwardMove2 = TrueSpeed.GetBool() ? 0.75 : 1;
		SideMove2 = TrueSpeed.GetBool() ? 0.75 : 1;
		
		//[DoomKrakken]: Let's nullify view-bobbing altogether, without affecting weapon-bobbing! :D
		If (Z_View.GetBool())
		{
			Player.ViewZ = Player.Mo.Pos.Z + Player.ViewHeight;
		}
		If (!Player.OnGround) //[DoomKrakken]: Player.OnGround checks if the player is on the ground or on an actor.
		{
			AirTime++; //= 1 + 2 * CountInv("Grabbing_A_Ledge");
		}
		Else
		{
			If (AirTime >= 5 * (1 + (FirstStep || (Vel.Z < 0))))
			{
				EOA_SpawnNoiseMaker("Player/Land");
			}
			AirTime = 0;
			FirstStep = False;
			If (CountInv("EOA_ThrustBoots"))
			{
				A_GiveInventory("DoubleJumpCounter");
			}
		}
		ThinkerIterator It = ThinkerIterator.Create("EOA_SecretMarker");
		EOA_SecretMarker SM;
		Bool Found;
		While (SM = EOA_SecretMarker(It.Next()))
		{
			If (CountInv("SecretFinder") && CheckIfCloser(SM, 512, True))
			{
				Found = True;
				Break;
			}
		}
		If (Found)
		{
			If (!NearSecret)
			{
				//A_GiveInventory("SecretFinderTicker");
				A_StartSound("SecretFinder/Blip", 20, CHANF_OVERLAP|CHANF_UI|CHANF_LOCAL);
				NearSecret = True;
			}
		}
		Else
		{
			NearSecret = False;
		}

		//More maintenance...
		If (!CountInv("EOA_HandlerItem"))
		{
			A_GiveInventory("EOA_HandlerItem");
		}
		If (!CountInv("EnvironmentalResistance"))
		{
			A_GiveInventory("EnvironmentalResistance");
		}
		If (!CountInv("EquipmentTriggerer"))
		{
			A_GiveInventory("EquipmentTriggerer");
		}
		If (!CountInv("EquipmentUnTriggerer"))
		{
			A_GiveInventory("EquipmentUnTriggerer");
		}
		If (!CountInv("CycleEquipmentLeft"))
		{
			A_GiveInventory("CycleEquipmentLeft");
		}
		If (!CountInv("CycleEquipmentRight"))
		{
			A_GiveInventory("CycleEquipmentRight");
		}
		If (CountInv("FragGrenadeSelected"))
		{
			A_TakeInventory("HologramSelected");
			A_TakeInventory("SiphonGrenadeSelected");
		}
		If (CountInv("HologramSelected"))
		{
			A_TakeInventory("FragGrenadeSelected");
			A_TakeInventory("SiphonGrenadeSelected");
		}
		If (CountInv("SiphonGrenadeSelected"))
		{
			A_TakeInventory("FragGrenadeSelected");
			A_TakeInventory("HologramSelected");
		}

		//[DoomKrakken]: Inspired by Nashmove.
		Double Friction, MoveFactor;
		[Friction, MoveFactor] = GetFriction();
		A_SetSpeed(Default.Speed * (1.0 + 1.5 * Player.OnGround * (Friction <= ORIG_FRICTION) * !InPain())); //[DoomKrakken]: Call before Super.Tick() so that the speed compensation can be factored in.

		Super.Tick();

		//[DoomKrakken]: Call after Super.Tick() so that the deceleration can be finalized.
		//[Nash]: decelerate the player, if not in pain
		If (Player.OnGround && !InPain())
		{
			//[DoomKrakken]: Lower friction factors means increased friction.  Sounds counter-intuitive, I know...
			If (Friction <= ORIG_FRICTION)
			{
				Vel.XY *= 0.8;
			}
		}
		ViewBob = (Player.OnGround && Friction <= ORIG_FRICTION) ? 0.8 : Default.ViewBob;
	}
	Bool InPain()
	{
		State PainState = FindState('Pain');
		If (PainState && InStateSequence(CurState, PainState))
		{
			Return True;
		}
		Return False;
	}
	Override Void MovePlayer() //[DoomKrakken]: Written by Gutawer. :D
	{
		//[Gutawer]: this is mostly new code because to be completely honest, the way doom does it is dumb
		Let Player = Self.Player;
		UserCMD CMD = Player.CMD;

		// [Rachael]: 180-degree turn overrides all other yaws
		If (Player.TurnTicks)
		{
			Player.TurnTicks--;
			//[Gutawer]: made this interpolate, looks way nicer
			A_SetAngle(Angle + (180.0 / TURN180_TICKS), SPF_INTERPOLATE);
		}
		Else
		{
			Angle += CMD.Yaw * (360.0 / 65536.0);
		}
		Player.OnGround = (Pos.Z <= FloorZ) || bONMOBJ || bMBFBOUNCER || (Player.Cheats & CF_NOCLIP2);
		
		//[Gutawer]: base movement vector
		Vector2 MoveVec = (0, 0);
		
		//[Gutawer]: dear whoever designed the way doom's movement works: ([DoomKrakken]: SHUT YO' MOUTH.) you. :)
		Double TweakedSideMove;
		Bool Sprint = (Player.CMD.Buttons & BT_SPEED) != 0;
		If (Run && Run.GetBool())
		{
			Sprint = !Sprint;
		}
		Sprint = Sprint && Health > RunHealth;
		TweakedSideMove = Clamp(CMD.SideMove / (Sprint ? 0.8 : 0.96), -0x3200, 0x3200);
		MoveVec = (TweakedSideMove, CMD.ForwardMove);
		If (MoveVec != (0, 0))
		{
			Double MaxSpeed = (Sprint ? 12800 : 6400);
			Double MoveLength = MoveVec.Length();
			If (MoveLength > MaxSpeed)
			{
				MoveVec *= MaxSpeed / MoveLength;
			}
			Vector2 OrigMoveVec = MoveVec;
			MoveVec.Y *= !Sprint ? ForwardMove1 : ForwardMove2;
			MoveVec.X *= !Sprint ? SideMove1 : SideMove2;
			Double BobFactor;
			Double Friction, MoveFactor;
			Double AirControl, AirFriction;
			[Friction, MoveFactor] = GetFriction();
			BobFactor = Friction < ORIG_FRICTION ? MoveFactor : ORIG_FRICTION_FACTOR;
			If (!Player.OnGround && !bNOGRAVITY && WaterLevel == 0)
			{
				//[Rachael]: allow very limited movement if not on ground.
				//[DoomKrakken]: Eeeeehhhhh, no.
				Level.AirFriction = 1;
				Level.AirControl = 0.2 + (0.8 * (CountInv("InFlightMobilitySelected") && (CountInv("InFlightMobilityII") || !CountInv("DoubleJumpCounter"))));
				MoveVec *= Level.AirControl;
				BobFactor *= Level.AirControl;
				AirFriction = (Level.AirControl * -0.0941 + 1.0004) * (0.9975 - 0.045 * (CountInv("InFlightMobilitySelected") && (CountInv("InFlightMobilityII") || !CountInv("DoubleJumpCounter"))));
				If (Player && Player.Mo && Player.Mo == Self && AirFriction != 1.0)
				{
					//[Gutawer]: Apply only to players, not voodoo dolls.
					Vel.XY *= AirFriction;
				}
			}
			
			//[Gutawer]: When crouching, speed and bobbing have to be reduced
			If (CanCrouch() && Player.CrouchFactor != 1)
			{
				MoveVec *= Player.CrouchFactor;
				BobFactor *= Player.CrouchFactor;
			}			
			If (Player.MorphTics == 0)
			{
				Double Factor = 1;
				For (Let It = Inv; It != Null; It = It.Inv)
				{
					Factor *= It.GetSpeedFactor();
				}
				MoveVec *= Factor;
			}
			MoveVec *= MoveFactor * Speed / 256;
			If (OrigMoveVec.Y != 0)
			{
				Bob(Angle, OrigMoveVec.Y * BobFactor / 256.0, True);
			}
			If (OrigMoveVec.X != 0)
			{
				Bob(Angle - 90, OrigMoveVec.X * BobFactor / 256.0, False);
			}
			If ((WaterLevel > 0 || bNOGRAVITY) && Pitch != 0 && !Player.GetClassicFlight())
			{
				Double ZPush = MoveVec.Y * sin(-Pitch);
				If (!(WaterLevel != 0 && WaterLevel < 2 && ZPush > 0))
				{
					Vel.Z += ZPush;
				}
				MoveVec.Y *= cos(Pitch);
			}
			Vel.XY += RotateVector(MoveVec, Angle - 90) / ((!Player.OnGround && !bNOGRAVITY && WaterLevel == 0) ? AirFriction : 1);
			
			//[Gutawer]: make the view bobbing match the player's movement
			If (Player.Cheats & CF_PREDICTING == 0 && (MoveVec.Y != 0 || MoveVec.X != 0))
			{
				PlayRunning();
			}
			If (Player.Cheats & CF_REVERTPLEASE != 0)
			{
				Player.Cheats &= ~CF_REVERTPLEASE;
				Player.Camera = Player.Mo;
			}
		}
	}
	
	Override Void CheckCrouch(Bool TotallyFrozen)
	{
		Let Player = Self.Player;
		UserCMD CMD = Player.CMD;
		If (CMD.Buttons & BT_JUMP)
		{
			CMD.Buttons &= ~BT_CROUCH;
		}
		If (CanCrouch() && Player.Health > 0) //[DoomKrakken]: DOOMGUY KNOWS NO BOUNDS.
		{
			If (!TotallyFrozen)
			{
				Int CrouchDir = Player.Crouching;

				If (CrouchDir == 0)
				{
					CrouchDir = (CMD.Buttons & BT_CROUCH) ? -1 : 1;
				}
				Else If (CMD.Buttons & BT_CROUCH)
				{
					Player.Crouching = 0;
				}
				If (CrouchDir == 1 && Player.CrouchFactor < 1 && Pos.Z + Height < CeilingZ)
				{
					CrouchMove(1);
				}
				Else If (CrouchDir == -1 && Player.CrouchFactor > 0.5)
				{
					CrouchMove(-1);
				}
			}
		}
		Else
		{
			Player.Uncrouch();
		}
		Player.CrouchOffset = -(ViewHeight) * (1 - Player.CrouchFactor);
	}

	Override Bool CheckFrozen()
	{
		Let Player = Self.Player;
		UserCMD CMD = Player.CMD;
		Bool Immobile = (Player.ReadyWeapon && (Player.ReadyWeapon.GetClass() Is "EOA_InteractWeapon")) || CountInv("RipAndTear") || CountInv("ChainsawRipAndTear") || CountInv("Grabbing_A_Ledge");
		Bool TotallyFrozen = Player.IsTotallyFrozen() || Immobile;

		// [RH] Being totally frozen zeros out most input parameters.
		// [DoomKrakken]: So do specific first-person interactions. ;)
		If (TotallyFrozen)
		{
			If (GameState == GS_TITLELEVEL || Immobile)
			{
				CMD.Buttons = 0;
			}
			Else
			{
				CMD.Buttons &= BT_USE;
			}
			CMD.Pitch = 0;
			CMD.Yaw = 0;
			CMD.Roll = 0;
			CMD.ForwardMove = 0;
			CMD.SideMove = 0;
			CMD.UpMove = 0;
			Player.TurnTicks = 0;
		}
		Else If (Player.Cheats & CF_FROZEN)
		{
			CMD.ForwardMove = 0;
			CMD.SideMove = 0;
			CMD.UpMove = 0;
		}
		Return TotallyFrozen;
	}
	
	Override Void CheckJump()
	{
		If (!((Player.Cheats & CF_FROZEN) && CountInv("SiegeModeChargeCounter")))
		{
			Let Player = Self.Player;
			// [RH] check for jump
			If (Player.CMD.Buttons & BT_JUMP)
			{
				If (Player.CrouchOffset != 0)
				{
					// Jumping while crouching will force an un-crouch but not jump
					Player.Crouching = 1;
				}
				Else If (WaterLevel >= 2)
				{
					Vel.Z = 4 * Speed;
				}
				Else If (bNOGRAVITY)
				{
					Vel.Z = 3.0;
				}
				Else If (!(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP))
				{
					If (Player.OnGround) //[DoomKrakken]: DOOMGUY KNOWS NO BOUNDS.
					{
						Double JumpVelZ = JumpZ * 35 / TICRATE;
						Double JumpFac = 0;

						// [BC] If the player has the high jump power, double his jump velocity.
						// (actually, pick the best factors from all active items.)
						For (Let p = Inv; p != Null; p = p.Inv)
						{
							Let pp = PowerHighJump(p);
							If (pp)
							{
								Double f = pp.Strength;
								If (f > JumpFac) JumpFac = f;
							}
						}
						If (JumpFac > 0) JumpVelZ *= JumpFac;

						Vel.Z += JumpVelZ;
						bONMOBJ = False;
						Player.JumpTics = -1;
						If (!(Player.Cheats & CF_PREDICTING))
						{
							EOA_SpawnNoiseMaker("Player/Jump");
						}
					}
					Else If (!Player.OnGround && CountInv("DoubleJumpCounter")) 
					{
						If (!(Player.Cheats & CF_PREDICTING))
						{
							A_TakeInventory("DoubleJumpCounter");
							EOA_SpawnNoiseMaker("Player/DoubleJump");
							EOA_SpawnNoiseMaker("Player/JumpThrust");
							If (CountInv("InFlightMobilitySelected"))
							{
								EOA_SpawnNoiseMaker("Rune/InFlightMobility", 0, 0.5);
							}
						}
						Double JumpVelZ = JumpZ * 35 / TICRATE;
						Double JumpFac = 0;
						If (Vel.Z <= JumpVelZ)
						{
							Vel = (Vel.X, Vel.Y, JumpVelZ);
						}
						Else
						{
							Vel += (0, 0, JumpVelZ);
						}
					}
				}
			}
		}
	}

	Override Int DamageMobj(Actor Inflictor, Actor Source, Int Damage, Name Mod, Int Flags, Double Angle) //"Environmental Resistance" code...
	{
		PlayerInfo Player = Self.Player; //Players[ConsolePlayer];
		//[DoomKrakken]: Take no damage from "Voodoo Dolls".  Because screw those in particular. }:)
		If (!Player || !Player.Mo || Player.Mo != Self) 
		{
			If (Self && Inflictor)
			{
				Thrust(Damage / (Mass * 1.0), Inflictor.AngleTo(Self)); //[DoomKrakken]: Apply thrust to voodoo dolls since some maps use explosive barrels to move voodoo dolls.
			}
			Return 0;
		}
		If (Mod == "Slime" || (Mod == "Fire" && !(Source && Source.bISMONSTER)) || Mod == "Crush" || Inflictor Is "ExplosiveBarrel")
		{
			Damage /= 2 * (1 + CountInv("HazardProtection"));
		}
		If (Source == Self && !(Inflictor Is "ExplosiveBarrel"))
		{
			Damage /= 1 + CountInv("SelfPreservation");
		}
		If (CountInv("BarrelsOFun") && (Inflictor Is "ExplosiveBarrel"))
		{
			Damage = 0;
		}
		If (CountInv("PowerSavingThrow") || Mod == "Falling") //Take absolutely no damage if Saving Throw's slow-mo effect is in play, or if you're falling.
		{
			Return 0;
		}
		If (Damage >= Health)
		{
			If (CountInv("SavingThrowSelected") && NumSavingThrows.GetInt() > 0 && !bKILLED)
			{
				Console.PrintF("%d", CVar.GetCVar("SavingThrows", Player).GetInt());
				If (Health >= 5)
				{
					A_SetHealth(5);
				}
				A_GiveInventory("SavingThrowItem");
				NumSavingThrows.SetInt(NumSavingThrows.GetInt() - 1);
				Return 0;
			}
			Else
			{
				NumSavingThrows.SetInt(CountInv("SavingThrow") + CountInv("SavingThrowII"));
			}
		}
		Int OldArmorAmount = CountInv("BasicArmor");
		Super.DamageMobj(Inflictor, Source, Damage, Mod, Flags, Angle); //[DoomKrakken]: Call DamageMobj here so that we can get results after the fact. :D
		Int ArmorDamage = OldArmorAmount - CountInv("BasicArmor");
		If (CountInv("BasicArmor") && BasicArmor(FindInventory("BasicArmor")).SavePercent == 1) //[DoomKrakken]: Check first to see if we even have basic armor, and if its SavePercent equals 1 (denoting 100% protection).
		{
			Player.DamageCount += ArmorDamage; //[DoomKrakken]: This will allow pain flashes to show up whenever damage is dealt even when armor is present in the player's inventory (since armor here absorbs 100% of the damage, causing no pain flashes to appear).
		}
		Return 0; //[DoomKrakken]: We already dealt damage with DamageMobj, so no need to return any more damage.
	}
	
	Override Void CheckCheats()
	{
		Let Player = Self.Player;
		// No-clip cheat
		If ((Player.Cheats & (CF_NOCLIP | CF_NOCLIP2)) == CF_NOCLIP2)
		{ // No noclip2 without noclip
			Player.Cheats &= ~CF_NOCLIP2;
		}
		bNOCLIP = (Player.Cheats & (CF_NOCLIP | CF_NOCLIP2) || Default.bNOCLIP);
		If (Player.Cheats & CF_NOCLIP2)
		{
			bNOGRAVITY = True;
		}
		Else If (!bFLY && !Default.bNOGRAVITY && !(CountInv("RipAndTear") || CountInv("ChainsawRipAndTear"))) //[DoomKrakken]: The main purpose of this override was to change it so that the player doesn't keep setting his NOGRAVITY flag to false during a Glory Kill sequence.
		{
			bNOGRAVITY = False;
		}
	}
	Override Bool OnGiveSecret(Bool PrintMsg, Bool PlaySound) //strongbelly: Secret Found message
	{ 
		ACS_NamedExecuteAlways("SecretHUDCounter");
		Return False; 
	}
	Static Void PrintUpgradeProgress(String UpgradeType, String UpgradeMsg, String UpgradeItem, Bool Completed = False)
	{
		PlayerInfo Player = Players[ConsolePlayer];
		If (Player && Player.Mo)
		{
			Int Msg1Tics;
			Int Msg2Tics;
			Int Msg3Tics;
			Let MessageHandler = EOA_HandlerItem(Player.Mo.FindInventory("EOA_HandlerItem"));
			Let Msg1 = Powerup(Player.Mo.FindInventory("PowerMsg1Active"));
			Let Msg2 = Powerup(Player.Mo.FindInventory("PowerMsg2Active"));
			Let Msg3 = Powerup(Player.Mo.FindInventory("PowerMsg3Active"));
			Let Chlg1 = Powerup(Player.Mo.FindInventory("PowerChallenge1Active"));
			Let Chlg2 = Powerup(Player.Mo.FindInventory("PowerChallenge2Active"));
			Let Chlg3 = Powerup(Player.Mo.FindInventory("PowerChallenge3Active"));
			Msg1Tics = Msg1 ? Msg1.EffectTics : Chlg1 ? Chlg1.EffectTics : 0;
			Msg2Tics = Msg2 ? Msg2.EffectTics : Chlg2 ? Chlg2.EffectTics : 0;
			Msg3Tics = Msg3 ? Msg3.EffectTics : Chlg3 ? Chlg3.EffectTics : 0;
			If (MessageHandler)
			{
				If ((!Msg1Tics || (Msg1Tics <= Msg2Tics && Msg1Tics <= Msg3Tics && MessageHandler.UpgradeType1 && MessageHandler.UpgradeType2 && MessageHandler.UpgradeType3)) && UpgradeMsg != MessageHandler.UpgradeMsg2 && UpgradeItem != MessageHandler.UpgradeItem2 && UpgradeMsg != MessageHandler.UpgradeMsg3 && UpgradeItem != MessageHandler.UpgradeItem3)
				{
					Player.Mo.A_GiveInventory("PowerMsg1Active");
					MessageHandler.UpgradeType1 = UpgradeType;
					MessageHandler.UpgradeMsg1 = UpgradeMsg;
					MessageHandler.UpgradeItem1 = UpgradeItem;
					MessageHandler.Challenge1Complete = Completed;
				}
				Else If ((!Msg2Tics || (Msg2Tics <= Msg1Tics && Msg2Tics <= Msg3Tics && MessageHandler.UpgradeType1 && MessageHandler.UpgradeType2 && MessageHandler.UpgradeType3)) && UpgradeMsg != MessageHandler.UpgradeMsg1 && UpgradeItem != MessageHandler.UpgradeItem1 && UpgradeMsg != MessageHandler.UpgradeMsg3 && UpgradeItem != MessageHandler.UpgradeItem3)
				{
					Player.Mo.A_GiveInventory("PowerMsg2Active");
					MessageHandler.UpgradeType2 = UpgradeType;
					MessageHandler.UpgradeMsg2 = UpgradeMsg;
					MessageHandler.UpgradeItem2 = UpgradeItem;
					MessageHandler.Challenge2Complete = Completed;
				}
				Else If ((!Msg3Tics || (Msg3Tics <= Msg1Tics && Msg3Tics <= Msg2Tics && MessageHandler.UpgradeType1 && MessageHandler.UpgradeType2 && MessageHandler.UpgradeType3)) && UpgradeMsg != MessageHandler.UpgradeMsg1 && UpgradeItem != MessageHandler.UpgradeItem1 && UpgradeMsg != MessageHandler.UpgradeMsg2 && UpgradeItem != MessageHandler.UpgradeItem2)
				{
					Player.Mo.A_GiveInventory("PowerMsg3Active");
					MessageHandler.UpgradeType3 = UpgradeType;
					MessageHandler.UpgradeMsg3 = UpgradeMsg;
					MessageHandler.UpgradeItem3 = UpgradeItem;
					MessageHandler.Challenge3Complete = Completed;
				}
			}
		}
	}
	Action Int CountMaxInv(Class<Inventory> ItemType)
	{
		Let Item = Invoker.FindInventory(ItemType);
		If (!ItemType)
		{
			Return 0;
		}
		Else
		{
			Return Item.MaxAmount;
		}
	}
	Action Void A_SetMaxInventory(Class<Inventory> ItemType, Int Amount)
	{
		Let Item = Invoker.FindInventory(ItemType);
		If (!Item)
		{
			Return;
		}
		Item.MaxAmount = Amount;
	}
	Action Void EOA_SpawnNoiseMaker(Sound WhatToPlay = "Weapons/Pistol", Int Flags = 0, Double Volume = 1.0, Double Attenuation = ATTN_NORM, Double Pitch = 0.0)
	{
		EOA_ActorExtensions.SpawnNoiseMaker(Self, WhatToPlay, 20, Flags|CHANF_OVERLAP, Volume, Attenuation, Pitch);
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_Overlay(2, "Overlay.Movement", 1);
		}
	TrueSpawn:
		DOOM A -1;
		Stop;
	See:
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT), 1);
		Goto TrueSpawn;
		DOOM AB 6
		{
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetTics(12);
			}
		}
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT), 1);
		Goto TrueSpawn;
		DOOM CD 6
		{
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetTics(12);
			}
		}
		Goto TrueSpawn;
	Missile:
		DOOM E 12 Bright;
		Goto TrueSpawn;
	Melee:
		DOOM F 6;
		Goto Missile;
	Pain:
		DOOM G 8 A_Pain();
		Goto TrueSpawn;
	Pain.Slime:
		DOOM G 8 EOA_SpawnNoiseMaker("Player/Nukemelt");
		Goto TrueSpawn;
	Pain.Melee:
		DOOM G 8 EOA_SpawnNoiseMaker("Player/Hit");
		Goto TrueSpawn;
	Death:
	AltSkinDeath:
		DOOM H 10 A_PlayerScream();
		DOOM I 10;
		DOOM J 10 A_NoBlocking();
		DOOM KLM 10;
		DOOM N -1;
		Stop;
	XDeath:
	AltSkinXDeath:
		DOOM O 5 A_XScream();
		DOOM P 5;
		DOOM Q 5 A_NoBlocking();
		DOOM RSTUV 5;
		DOOM W -1;
		Stop;
	Overlay.Movement:
		/*TNT1 A 0
		{
			If (User_Walking == 1)
			{
				A_SetUserVar("User_Walking", 0);
				Return;
			}
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetUserVar("User_Walking", 1);
			}
		}
		TNT1 A 0 A_JumpIf(User_Walking, 6)*/
		TNT1 AAAAAA 1 A_JumpIfHealthLower(1, "Null");
		TNT1 A 0
		{
			If (GetPlayerInput(MODINPUT_FORWARDMOVE) != 0 || GetPlayerInput(MODINPUT_SIDEMOVE) != 0)
			{
				A_SpawnItemEx("FootstepFX", 0, 0, 0, 0, 0, -10, 0, SXF_SETTARGET, 0);	
			}
			If (CountInv("DoomSlayerSteps"))
			{
				EOA_SpawnNoiseMaker("Player/Move", 0, 0.3);
				EOA_SpawnNoiseMaker("Player/Footstep", 0, 0.3);
				A_TakeInventory("DoomSlayerSteps");
			}
		}
		TNT1 AAAAAA 1 A_JumpIfHealthLower(1, "Null");
		Loop;
	GenericFreezeDeath:
		"####" "#" 0 A_ClearOverlays();
		Goto Super::GenericFreezeDeath;
	}
}

Class PowerMsg1Active : Powerup
{
	Default
	{
		Powerup.Duration -5;
	}
}

Class PowerMsg2Active : Powerup
{
	Default
	{
		Powerup.Duration -5;
	}
}

Class PowerMsg3Active : Powerup
{
	Default
	{
		Powerup.Duration -5;
	}
}

Class EOA_HandlerItem : CustomInventory
{
	Transient CVar NumSavingThrows, RS1, RS2, RS3;
	Weapon LastWeapon, CurrentWeapon, TransitionWeapon;
	String UpgradeChallenge1, UpgradeChallenge2, UpgradeChallenge3, UpgradeType1, UpgradeType2, UpgradeType3, UpgradeMsg1, UpgradeMsg2, UpgradeMsg3, UpgradeItem1, UpgradeItem2, UpgradeItem3;
	Bool Challenge1Complete, Challenge2Complete, Challenge3Complete, SwitchWeapon;
	Int RuneSlot1, RuneSlot2, RuneSlot3, SavingThrows;
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		-INVENTORY.INVBAR
	}
	Override Void DoEffect()
	{
		PlayerInfo Player = Owner.Player;
		If (Player && Player.Mo && Player.Mo == Owner && PlayerInGame[ConsolePlayer])
		{
			Let ReadyWeaponBase = EOA_Weapon(Player.ReadyWeapon); //[DoomKrakken]: Cast to see if it's one of my custom weapons.
			//[DoomKrakken]: Be sure to check for the presence of a Ready Weapon.  Else, a VM abort will occur upon loading a titlemap.  Also make sure that casting was successful, and make sure it's not a power weapon. :D
			If (Player.ReadyWeapon && !Player.ReadyWeapon.bCHEATNOTWEAPON && ReadyWeaponBase && !ReadyWeaponBase.bPOWERWEAPON)
			{
				CurrentWeapon = Player.ReadyWeapon; //[DoomKrakken]: Store the weapon you have at the ready.
				Let PendingWeaponBase = EOA_Weapon(Player.PendingWeapon); //[DoomKrakken]: Cast to see if it's one of my custom weapons.
				//[DoomKrakken]: Be sure to check for the presence of a Pending Weapon.  Else, a VM abort will occur upon loading a titlemap.  Also make sure that casting was successful, and make sure it's not a power weapon. :D
				If (!Player.PendingWeapon.bCHEATNOTWEAPON && PendingWeaponBase && !PendingWeaponBase.bPOWERWEAPON && Player.PendingWeapon != WP_NOCHANGE && CurrentWeapon)
				{
					If (LastWeapon != CurrentWeapon)
					{
						TransitionWeapon = LastWeapon; //[DoomKrakken]: Store whatever weapon LastWeapon is in TransitionWeapon, so that we don't keep selecting the same weapon over and over again every time we use this item.
					}
					LastWeapon = CurrentWeapon; //[DoomKrakken]: Store the weapon we're switching away from in LastWeapon so that it can be switched back to when using this item.
				}
			}
			If (!LastWeapon)
			{
				LastWeapon = WP_NOCHANGE; //[DoomKrakken]: In case there is no value assigned to LastWeapon, assign this constant.
			}
			If (!TransitionWeapon)
			{
				TransitionWeapon = WP_NOCHANGE; //[DoomKrakken]: In case there is no value assigned to LastWeapon, assign this constant.
			}			
			If (SwitchWeapon) //[DoomKrakken]: This will be activated whenever we use the item.
			{
				SwitchWeapon = False;
				If (Player.PendingWeapon == WP_NOCHANGE) //[DoomKrakken]: If we're currently not changing weapons...
				{
					If (ReadyWeaponBase && ReadyWeaponBase.bPOWERWEAPON && TransitionWeapon) //[DoomKrakken]: ... and we have a TransitionWeapon, and the Ready Weapon casted properly, and it's a power weapon...
					{
						If (LastWeapon == CurrentWeapon) //[DoomKrakken]: ... check if LastWeapon is equal to CurrentWeapon.
						{
							Player.PendingWeapon = TransitionWeapon; //[DoomKrakken]: If so, switch to the TransitionWeapon.
						}
						Else
						{
							Player.PendingWeapon = CurrentWeapon; //[DoomKrakken]: Else, switch to the CurrentWeapon.
						}
					}
					Else
					{
						Player.PendingWeapon = LastWeapon; //[DoomKrakken]: If it's no power weapon, or the weapon didn't cast properly, or there is no TransitionWeapon (which should theoretically be impossible), switch to the LastWeapon.
					}
				}
			}
			//Runes
			RS1 = RS1 ? RS1 : CVar.GetCVar("RuneSlot1", Player);
			RS2 = RS2 ? RS2 : CVar.GetCVar("RuneSlot2", Player);
			RS3 = RS3 ? RS3 : CVar.GetCVar("RuneSlot3", Player);
			RS1.SetInt(RuneSlot1);
			RS2.SetInt(RuneSlot2);
			RS3.SetInt(RuneSlot3);
			
			//[DoomKrakken]: "Saving Throw" transcends the mortal bounds of the savegame file.
			//Storing info in CVars is the only way to bypass getting that info set to whatever it was when the save file was created.
			//Unarchived CVars get reset upon closing the current session, and archived CVars are saved even outside of your current game.
			//Therefore, in order to transcend the mortal bounds of the savegame file, but to have the information pertain only to the specific savegame file...
			//We'll store the info from the unarchived CVar into a custom variable in the handler item upon closing the game.
			//Upon reopening the savegame file, the info from that variable will be transferred back to the unarchived CVar.

			NumSavingThrows = NumSavingThrows ? NumSavingThrows : CVar.GetCVar("SavingThrows", Player);

			If (NumSavingThrows.GetInt() == -1) //Fetch the amount of saving throws from the handler item before attempting to store this value back into the handler item.  We want this check done beforehand since unarchived CVars are reset between game sessions.
			{
				NumSavingThrows.SetInt(SavingThrows);
			}
			SavingThrows = NumSavingThrows.GetInt();
		}
		Super.DoEffect();
	}
	States
	{
	Use:
		TNT1 A 0
		{
			Invoker.SwitchWeapon = True;
		}
		Fail;
	}
}

Class FootstepFXBase : Actor
{
	Default
	{
		Projectile;
		Damage 0;
		Radius 10;
		DeathSound "";
		+DONTBLAST
		+NOBLOOD
		+SKYEXPLODE
	}
	States
	{
	Spawn:
		TNT1 A 1;
	Death:
		TNT1 A 1;
		Stop;
	}
}

Class FootstepFX : FootstepFXBase
{
	States
	{
	Death:
		TNT1 A 1 A_GiveToTarget("DoomSlayerSteps");
		Stop;
	}
}

Class DoomSlayerFootstep : FootstepFXBase
{
	Default
	{
		DeathSound "Player/Footstep";
	}
}

Class DoomSlayerMovestep : FootstepFXBase
{
	Default
	{
		DeathSound "Player/Move";
	}
}

Class DoomSlayerSteps : Inventory {Default {Inventory.MaxAmount 1;} }

Class EOA_AreaScanner : EOA_TempToken
{
	Default
	{
		Powerup.Type "PowerScanner";
		Powerup.Duration 0x7FFFFFFF;
	}
}

//Class PowerEOA_AreaScanner : PowerScanner {}

Class EOA_ShotgunStart : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOA_CSGStart"))
			{
				A_GiveInventory("EOA_CombatShotgun");
				A_GiveInventory("EOA_PumpActionCounter");
				A_SelectWeapon("EOA_CombatShotgun");
			}
		}
		Stop;
	}
}

Class EOA_ThrustBootStart : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOA_JumpStart"))
			{
				A_GiveInventory("EOA_ThrustBoots");
			}
		}
		Stop;
	}
}