//Player Handling
Class GloryKillChecker : EOA_NullPuff2
{
	Default
	{
		+HITTRACER
	}
	States
	{
	Spawn:
	Crash:
	Death:
	XDeath:
		TNT1 A 1 NoDelay
		{
			//[DoomKrakken]: Let me explain...
			//If the monster doesn't have "GloryKillCounter" in its inventory and isn't dormant, continue...
			//If the monster is staggered, perform the Glory Kill.
			//If the player has Berserk and hits a non-boss monster or any monster (boss or non) that has fewer than 3000 max health, perform the Glory Kill.
			If (Tracer && Target && !CountInv("RipAndTear", AAPTR_TARGET) && !CountInv("GloryKillCounter", AAPTR_TRACER) && !Tracer.bDORMANT && ((CountInv("PowerStaggered", AAPTR_TRACER) || (CountInv("PowerBerserk", AAPTR_TARGET) && Tracer.bISMONSTER && (!Tracer.bBOSS || Tracer.Health < 3000)))))
			{
				Target.Tracer = Tracer; //Have the victim be stored in the player's Tracer pointer.
				Tracer.Target = Target; //Have the player be stored in the victim's Target pointer.
				A_GiveToTarget("RipAndTear");
				A_GiveInventory("PowerStaggered", 1, AAPTR_TRACER);
				Tracer.bNOTARGETSWITCH = Tracer.bNEVERTARGET = Tracer.bNODAMAGE = True;
				Tracer.A_GiveInventory("GloryKillCounter");
				//A_GiveInventory("GloryKillPrimer", 1, AAPTR_TRACER);
			}
		}
		Stop;
	}
}

Class RipAndTear : EOA_Token{}
Class GloryKillCounter : EOA_KillCounter{}

Class GloryKillIndicator : Actor
{
	Bool AlmostRecovered, ReverseFade;
	Default
	{
		RenderStyle "Add";
		Alpha 1;
		+BRIGHT
		+FLOORCLIP
		+NOCLIP
		+NOINTERACTION
	}
	Action Bool EOA_CheckPlayerInRange(Int Dist)
	{
		For (Int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo Player = Players[i];
			If (Player && Player.Mo && PlayerInGame[i])
			{
				Dist *= (1 + Player.Mo.CountInv("SeekAndDestroySelected")) * (1 + (Player.Mo.CountInv("SeekAndDestroySelected") * Player.Mo.CountInv("SeekAndDestroyII")));
				If ((CheckSight(Player.Mo) || !Level.IsPointInLevel(Pos)) && CheckIfCloser(Player.Mo, Dist))
				{
					Tracer = Player.Mo;
					Return True;
				}
			}
		}
		Tracer = Null;
		Return False;
	}
	States
	{
	Spawn:
		//[DoomKrakken]: If handled in WorldThingDamaged, multiple of these things can spawn at once, from a multi-hit attack such as a (Super) Shotgun blast.
		TNT1 A 0 NoDelay A_JumpIf(!GetCVar("EOA_GKHighlights"), 2);
		"####" "#" 0 A_CopySpriteFrame(AAPTR_MASTER, AAPTR_DEFAULT);
		"####" "#" 1
		{
			If (Master)
			{
				bNOGRAVITY = Master ? Master.bNOGRAVITY : Default.bNOGRAVITY;
				A_Warp(AAPTR_MASTER, 0, 0, 5 * !bNOGRAVITY, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
				//[DoomKrakken]: Because grounded actors have it clip through the floor some, for whatever retarded reason.
				bFORCEXYBILLBOARD = Master ? Master.bFORCEXYBILLBOARD : Default.bFORCEXYBILLBOARD;
				If (EOA_CheckPlayerInRange(192))
				{
					A_SetTranslation("Orange");
				}
				Else
				{
					A_SetTranslation("Cyan");
				}
				//[DoomKrakken]: If the alpha ever goes below 0, it'll spike up as though it were set to 1.
				If (Alpha >= 0.9)
				{
					ReverseFade = True;
				}
				If (Alpha <= 0.1)
				{
					ReverseFade = False;
				}
				Let StaggerItem = Powerup(Master.FindInventory("PowerStaggered"));
				If (StaggerItem)
				{
					AlmostRecovered = StaggerItem.EffectTics <= 35;
				}
				If (!ReverseFade)
				{
					A_FadeIn(0.09 + 0.2 * AlmostRecovered, 0);
				}
				Else
				{
					A_FadeOut(0.09 + 0.2 * AlmostRecovered, 0);
				}
				If (!Master || Master.bKILLED || !CountInv("PowerStaggered", AAPTR_MASTER) || CountInv("GloryKillCounter", AAPTR_MASTER) || CountInv("ChainsawGloryKillCounter", AAPTR_MASTER) || CountInv("PowerStunned", AAPTR_MASTER))
				{
					Return ResolveState("Null");
				}
			}
			Return ResolveState(Null);
		}
		Loop;
	}
}

//Manipulation
Class GloryPunched : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0 A_Pain();
		Stop;
	}
}

Class GloryKilled : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_FaceTarget();
			bNOTARGETSWITCH = Default.bNOTARGETSWITCH;
			bNODAMAGE = Default.bNODAMAGE;
			bNEVERTARGET = Default.bNEVERTARGET;
			bEXTREMEDEATH = CountInv("EOA_BerserkFist", AAPTR_TARGET) || CountInv("ChainsawGloryKillCounter");
			A_DamageSelf(0, "Melee", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOFACTOR|DMSS_NOPROTECT|DMSS_KILL, "None", "None", AAPTR_TARGET);
			bEXTREMEDEATH = Default.bEXTREMEDEATH;
			A_NoBlocking(0); //Have it not block anything, so it won't bump into anyone... but don't have it drop anything.
			A_Recoil((20 + 20 * CountInv("EOA_BerserkFist", AAPTR_TARGET)) * (1 - CountInv("ChainsawGloryKillCounter")) * (1 - CountInv("DeathFromAbove", AAPTR_TARGET))); //Double Recoil from Berserk punches, no recoil from Chainsaw or "Death From Above" Glory Kills.
		}
		Stop;
	}
}

Class GloryTorn : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_FaceTarget();
			bNOTARGETSWITCH = Default.bNOTARGETSWITCH;
			bNODAMAGE = Default.bNODAMAGE;
			bNEVERTARGET = Default.bNEVERTARGET;
			bEXTREMEDEATH = CountInv("EOA_BerserkFist", AAPTR_TARGET) || CountInv("ChainsawGloryKillCounter");
			A_DamageSelf(0, "Melee", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOFACTOR|DMSS_NOPROTECT|DMSS_KILL, "None", "None", AAPTR_TARGET);
			bEXTREMEDEATH = Default.bEXTREMEDEATH;
			A_NoBlocking(0); //Have it not block anything, so it won't bump into anyone... but don't have it drop anything.
		}
		Stop;
	}
}

//Glory Kill Seeker
Class EOA_GKSeeker : FastProjectile //[DoomKrakken]: Concept was taken from ZION.  This thing travels towards the monster to Glory Kill, and the player will follow it.
{
	Default
	{
		Radius 0.5;
		Height 1;
		Speed 50;
		+BLOCKASPLAYER //[DoomKrakken]: YES.
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		+STEPMISSILE
		+SLIDESONWALLS
	}
	Override Void PostBeginPlay()
	{
		PlayerInfo Player = Players[ConsolePlayer];
		If (Player && Player.Mo && Player.Mo == Target && Target)
		{
			A_SetSize(Target.Radius * 1.25, Target.Height / 2); //[DoomKrakken]: Give us a little room to stretch. :D
			SetOrigin((Pos.X, Pos.Y, Target.Pos.Z + Target.Height / 4), False);
			Target.Master = Self;
			If (Target.Tracer)
			{
				Tracer = Target.Tracer;
				If (Tracer)
				{
					Tracer.Target = Target;
					A_FaceTracer(90, 0, 0, 0, FAF_MIDDLE);
					A_SeekerMissile(90, 90, SMF_CURSPEED|SMF_PRECISE);
					If (Target && Tracer && Target.Pos.Z > Tracer.Pos.Z + Tracer.Height * 2 / 3.0 && !Tracer.bNOGRAVITY && !Target.CountInv("ChainsawRipAndTear"))
					{
						A_GiveToTarget("DeathFromAbove");
					}
				}
			}
		}
		Super.PostBeginPlay();
	}
	Override Bool CanCollideWith(Actor Other, Bool Passive)
	{
		If (!Passive && Other == Tracer)
		{
			If (Tracer && Target)
			{
				Tracer.Target = Target;
				Target.A_FaceTracer(90, 0, 0, 0, FAF_MIDDLE);
				If (!Target.bNOGRAVITY && !Target.bKILLED)
				{
					Target.A_Warp(AAPTR_MASTER, 0, 0, Tracer.Pos.Z - Pos.Z + Tracer.Height * CountInv("DeathFromAbove", AAPTR_TARGET), 0, WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION, Null, -CountInv("DeathFromAbove"));
				}
				Tracer.A_GiveInventory("WarpToMe");
			}
			Return True;
		}
		Return False;
	}
	Override Void OnDestroy()
	{
		PlayerInfo Player = Players[ConsolePlayer];
		If (Player && Player.Mo && Player.Mo == Target && Target)
		{
			A_SetSize(Target.Radius * 1.25, Target.Height / 2); //[DoomKrakken]: Give us a little room to stretch. :D
			SetOrigin((Pos.X, Pos.Y, Target.Pos.Z + Target.Height / 4), False);
			Target.Master = Self;
			If (Target.Tracer)
			{
				Tracer = Target.Tracer;
				Tracer.Target = Target;
				A_FaceTracer(90, 0, 0, 0, FAF_MIDDLE);
				A_SeekerMissile(90, 90, SMF_CURSPEED|SMF_PRECISE);
				Target.A_SetPitch(0, SPF_INTERPOLATE);
				If (Tracer)
				{
					If (Target.Pos.Z > Tracer.Pos.Z + Tracer.Height * 2 / 3.0 && !Tracer.bNOGRAVITY && !Target.CountInv("ChainsawRipAndTear"))
					{
						A_GiveToTarget("DeathFromAbove");
					}
					Tracer.A_GiveInventory("WarpToMe");
				}
			}
		}
		Super.OnDestroy();
	}
	Override Void Effect()
	{
		If (Target && Target.Tracer)
		{
			Target.Master = Self;
			Tracer = Target.Tracer;
			A_SetSpeed(50 * (1 + CountInv("SeekAndDestroySelected", AAPTR_TARGET)) * (1 + (CountInv("SeekAndDestroySelected", AAPTR_TARGET) * CountInv("SeekAndDestroyII", AAPTR_TARGET))));
			A_SeekerMissile(90, 90, SMF_PRECISE);
			A_FaceTracer(90, 90, 0, 0, FAF_MIDDLE);
			Target.A_Warp(AAPTR_MASTER, 0, 0, -Target.Height / 4, 0, WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION);
		}
		Super.Effect();
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

Class WarpToMe : CustomInventory
{
	Double TrueAngle;
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (Target)
			{
				Invoker.TrueAngle = Angle;
				If (!bKILLED)
				{
					A_Warp(AAPTR_TARGET, -Radius, 0, -Height * CountInv("DeathFromAbove", AAPTR_TARGET), 180, WARPF_NOCHECKPOSITION|WARPF_WARPINTERPOLATION|WARPF_STOP, "None", 0, CountInv("DeathFromAbove", AAPTR_TARGET) - 1);
				}
				A_SetAngle(Invoker.TrueAngle);
			}
		}
		Stop;
	}
}

Class SavageryArray
{
	Actor Victim;
	Name ClassName;
	Int Angle;
	Name MOD;
	Bool DeathFromAbove;
}

Class StaggerItem : Inventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
	Override Void OwnerDied()
	{
		Destroy();
	}
}

Class PowerStaggered : Powerup
{
	Bool OwnerDead;
	Int StaggerDelay;
	Default
	{
		Powerup.Duration -5;
	}
	Override Void Tick() {} //[DoomKrakken]: Do nothing here.
	Override Void DoEffect()
	{
		If (!Owner || Owner.bKILLED || (EffectTics <= 0 && !(Owner.CountInv("GloryKillCounter") || Owner.CountInv("ChainsawGloryKillCounter"))) || Owner.CountInv("PowerStunned"))
		{
			Destroy();
			Return;
		}
		If (GetAge() == 1) //[DoomKrakken]: Delay by 1 tic so that the monster doesn't start doing any of this if it actually happens to be killed (in case other attacks come in simultaneously, such as with a shotgun, as the item is given the moment the monster crosses a specific damage threshold).
		{
			Owner.bFLOAT = False;
			Owner.A_SetSpeed(0);
			Owner.A_Stop();
			Owner.A_Pain();
			Owner.A_SpawnItemEx("GloryKillIndicator", Flags: SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERSCALE);
			Owner.A_SpawnItemEx("GloryKillIndicator", Flags: SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERSCALE);
			ThinkerIterator It = ThinkerIterator.Create("EOA_Essentials");
			EOA_Essentials Essentials;
			While (Essentials = EOA_Essentials(It.Next()))
			{
				If (Essentials && Essentials.Owner == Owner)
				{
					If (Owner.Health <= Essentials.StaggerThreshold * (1 + (GetIntimacyIsBest() == 2) * 0.75))
					{
						For (Int i = 0; i < MAXPLAYERS; i++)
						{
							PlayerInfo Player = Players[i];
							If (!(PlayerInGame[i] || Player.Mo) || !Player.Mo.CountInv("IntimacyIsBestSelected") || Player.Mo.CountInv("IntimacyIsBestII"))
							{
								Continue;
							}
							Player.Mo.A_GiveInventory("IntimacyIsBestChallengeCounter");
						}
					}
				}
			}
		}
		StaggerDelay++;
		If (StaggerDelay % (1 + GetDazedAndConfused()) == 0)
		{
			EffectTics--;
		}
		Owner.bFORCEPAIN = True;
		Owner.bNODAMAGE = True;
		Owner.A_DamageSelf(1, Flags: DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOFACTOR|DMSS_NOPROTECT);
		Owner.bNODAMAGE = (Owner.CountInv("GloryKillCounter") || Owner.CountInv("ChainsawGloryKillCounter")) ? True : Owner.Default.bNODAMAGE;
		Owner.bFORCEPAIN = (Owner.CountInv("GloryKillCounter") || Owner.CountInv("ChainsawGloryKillCounter")) ? True : Owner.Default.bFORCEPAIN;
		If (StaggerDelay >= 175 * (1 + GetDazedAndConfused()) + 105 && (Owner.CountInv("GloryKillCounter") || Owner.CountInv("ChainsawGloryKillCounter"))) //[DoomKrakken]: In the rare chance that the monster somehow isn't Glory-Killed, this'll check 3 seconds out from the number of tics the monster was supposed to be staggered.  If that happens, the monster will automatically die.
		{
			If (Owner.CountInv("ChainsawGloryKillCounter"))
			{
				Owner.A_DamageSelf(0, "Extreme", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOFACTOR|DMSS_NOPROTECT|DMSS_KILL, "None", "None", AAPTR_TARGET);
			}
			Else
			{
				Owner.A_DamageSelf(0, "Normal", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOFACTOR|DMSS_NOPROTECT|DMSS_KILL, "None", "None", AAPTR_TARGET);						
			}
		}
		Super.DoEffect();
	}
	Override Void ModifyDamage(Int Damage, Name DamageType, Out Int NewDamage, Bool Passive, Actor Inflictor, Actor Source, Int Flags)
	{
		If (GetAge() && Passive && Source && Source != Self) //[DoomKrakken]: Delay by 1 tic after existing so that any other attacks that come in on the same tic won't get nerfed.
		{
			Switch (GetIntimacyIsBest())
			{
			Case 1:
				NewDamage = Damage * 0.2;
				Break;
			Case 2:
				NewDamage = Damage * 0.34;
				Break;
			}
		}
		Super.ModifyDamage(Damage, DamageType, NewDamage, Passive, Inflictor, Source, Flags);
	}
	Override Void OwnerDied()
	{
		OwnerDead = True;
		Super.OwnerDied();
	}
	Override Void DetachFromOwner()
	{
		Super.DetachFromOwner();
		If (Owner)
		{
			Owner.bNODAMAGE = Owner.Default.bNODAMAGE;
			Owner.bFORCEPAIN = Owner.Default.bFORCEPAIN;
			Owner.bFLOAT = Owner.Default.bFLOAT;
			Owner.A_SetSpeed(Owner.Default.Speed);
			If (!OwnerDead) //[DoomKrakken]: Replenish health only if the owner is not dead.  Else, if the monster died, it'll become a "phantom" monster.
			{
				RecoverHealth(Owner, GetIntimacyIsBest() == 2);
			}
		}
	}
	Void RecoverHealth(Actor Recoverer, Bool IntimacyIsBestII)
	{
		If (Recoverer)
		{
			Int SpawnHealth = Recoverer.GetSpawnHealth();
			If (Recoverer.bBOSS && SpawnHealth >= 3000)
			{
				Recoverer.A_SetHealth(SpawnHealth / 5 * (1 + 0.75 * IntimacyIsBestII));
			}
			Else If (SpawnHealth > 50)
			{
				Recoverer.A_SetHealth(SpawnHealth / 2 * (1 + 0.75 * IntimacyIsBestII));
			}
			Else
			{
				Recoverer.A_SetHealth(SpawnHealth / 1.25);
			}
		}
	}
	Int GetDazedAndConfused()
	{
		Int DazedAndConfused;
		For (Int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo Player = Players[i];
			If (!(PlayerInGame[i] && Player.Mo))
			{
				Continue;
			}
			DazedAndConfused = max(DazedAndConfused, Player.Mo.CountInv("DazedAndConfusedSelected") + Player.Mo.CountInv("DazedAndConfusedSelected") * Player.Mo.CountInv("DazedAndConfusedII")); //[DoomKrakken]: Check all players' inventory for at least one of them having this rune.
			If (DazedAndConfused >= 2) //[DoomKrakken]: If one has the upgraded rune selected, then there's no need to check anyone else's inventory for it.
			{
				Break;
			}
		}
		Return DazedAndConfused;
	}
	Int GetIntimacyIsBest()
	{
		Int IntimacyIsBest;
		For (Int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo Player = Players[i];
			If (!(PlayerInGame[i] && Player.Mo))
			{
				Continue;
			}
			IntimacyIsBest = max(IntimacyIsBest, Player.Mo.CountInv("IntimacyIsBestSelected") + Player.Mo.CountInv("IntimacyIsBestSelected") * Player.Mo.CountInv("IntimacyIsBestII")); //[DoomKrakken]: Check all players' inventory for at least one of them having this rune equipped.
			If (IntimacyIsBest >= 2) //[DoomKrakken]: If one has the upgraded rune selected, then there's no need to check anyone else's inventory for it.
			{
				Break;
			}
		}
		Return IntimacyIsBest;
	}
}

Class RecoveryIndicator : PowerupGiver
{
	Default
	{
		Inventory.MaxAmount 0;
		Powerup.Type "PowerAlmostRecovered";
		Powerup.Duration -1;
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
	}
}

Class PowerAlmostRecovered : Powerup{}